// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sparkplug_b.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sparkplug_5fb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sparkplug_5fb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sparkplug_5fb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sparkplug_5fb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sparkplug_5fb_2eproto;
namespace com {
namespace cirruslink {
namespace sparkplug {
namespace protobuf {
class Payload;
struct PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
class Payload_DataSet;
struct Payload_DataSetDefaultTypeInternal;
extern Payload_DataSetDefaultTypeInternal _Payload_DataSet_default_instance_;
class Payload_DataSet_DataSetValue;
struct Payload_DataSet_DataSetValueDefaultTypeInternal;
extern Payload_DataSet_DataSetValueDefaultTypeInternal _Payload_DataSet_DataSetValue_default_instance_;
class Payload_DataSet_DataSetValue_DataSetValueExtension;
struct Payload_DataSet_DataSetValue_DataSetValueExtensionDefaultTypeInternal;
extern Payload_DataSet_DataSetValue_DataSetValueExtensionDefaultTypeInternal _Payload_DataSet_DataSetValue_DataSetValueExtension_default_instance_;
class Payload_DataSet_Row;
struct Payload_DataSet_RowDefaultTypeInternal;
extern Payload_DataSet_RowDefaultTypeInternal _Payload_DataSet_Row_default_instance_;
class Payload_MetaData;
struct Payload_MetaDataDefaultTypeInternal;
extern Payload_MetaDataDefaultTypeInternal _Payload_MetaData_default_instance_;
class Payload_Metric;
struct Payload_MetricDefaultTypeInternal;
extern Payload_MetricDefaultTypeInternal _Payload_Metric_default_instance_;
class Payload_Metric_MetricValueExtension;
struct Payload_Metric_MetricValueExtensionDefaultTypeInternal;
extern Payload_Metric_MetricValueExtensionDefaultTypeInternal _Payload_Metric_MetricValueExtension_default_instance_;
class Payload_PropertySet;
struct Payload_PropertySetDefaultTypeInternal;
extern Payload_PropertySetDefaultTypeInternal _Payload_PropertySet_default_instance_;
class Payload_PropertySetList;
struct Payload_PropertySetListDefaultTypeInternal;
extern Payload_PropertySetListDefaultTypeInternal _Payload_PropertySetList_default_instance_;
class Payload_PropertyValue;
struct Payload_PropertyValueDefaultTypeInternal;
extern Payload_PropertyValueDefaultTypeInternal _Payload_PropertyValue_default_instance_;
class Payload_PropertyValue_PropertyValueExtension;
struct Payload_PropertyValue_PropertyValueExtensionDefaultTypeInternal;
extern Payload_PropertyValue_PropertyValueExtensionDefaultTypeInternal _Payload_PropertyValue_PropertyValueExtension_default_instance_;
class Payload_Template;
struct Payload_TemplateDefaultTypeInternal;
extern Payload_TemplateDefaultTypeInternal _Payload_Template_default_instance_;
class Payload_Template_Parameter;
struct Payload_Template_ParameterDefaultTypeInternal;
extern Payload_Template_ParameterDefaultTypeInternal _Payload_Template_Parameter_default_instance_;
class Payload_Template_Parameter_ParameterValueExtension;
struct Payload_Template_Parameter_ParameterValueExtensionDefaultTypeInternal;
extern Payload_Template_Parameter_ParameterValueExtensionDefaultTypeInternal _Payload_Template_Parameter_ParameterValueExtension_default_instance_;
}  // namespace protobuf
}  // namespace sparkplug
}  // namespace cirruslink
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::cirruslink::sparkplug::protobuf::Payload* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_DataSet>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_MetaData>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_Metric* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_Metric>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_PropertySet>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_Template* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_Template>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter>(Arena*);
template<> ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* Arena::CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace cirruslink {
namespace sparkplug {
namespace protobuf {

// ===================================================================

class Payload_Template_Parameter_ParameterValueExtension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension) */ {
 public:
  inline Payload_Template_Parameter_ParameterValueExtension() : Payload_Template_Parameter_ParameterValueExtension(nullptr) {}
  ~Payload_Template_Parameter_ParameterValueExtension() override;
  explicit constexpr Payload_Template_Parameter_ParameterValueExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_Template_Parameter_ParameterValueExtension(const Payload_Template_Parameter_ParameterValueExtension& from);
  Payload_Template_Parameter_ParameterValueExtension(Payload_Template_Parameter_ParameterValueExtension&& from) noexcept
    : Payload_Template_Parameter_ParameterValueExtension() {
    *this = ::std::move(from);
  }

  inline Payload_Template_Parameter_ParameterValueExtension& operator=(const Payload_Template_Parameter_ParameterValueExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_Template_Parameter_ParameterValueExtension& operator=(Payload_Template_Parameter_ParameterValueExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_Template_Parameter_ParameterValueExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_Template_Parameter_ParameterValueExtension* internal_default_instance() {
    return reinterpret_cast<const Payload_Template_Parameter_ParameterValueExtension*>(
               &_Payload_Template_Parameter_ParameterValueExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Payload_Template_Parameter_ParameterValueExtension& a, Payload_Template_Parameter_ParameterValueExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_Template_Parameter_ParameterValueExtension* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_Template_Parameter_ParameterValueExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_Template_Parameter_ParameterValueExtension* New() const final {
    return new Payload_Template_Parameter_ParameterValueExtension();
  }

  Payload_Template_Parameter_ParameterValueExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_Template_Parameter_ParameterValueExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_Template_Parameter_ParameterValueExtension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_Template_Parameter_ParameterValueExtension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_Template_Parameter_ParameterValueExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension";
  }
  protected:
  explicit Payload_Template_Parameter_ParameterValueExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_Template_Parameter_ParameterValueExtension)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_Template_Parameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter) */ {
 public:
  inline Payload_Template_Parameter() : Payload_Template_Parameter(nullptr) {}
  ~Payload_Template_Parameter() override;
  explicit constexpr Payload_Template_Parameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_Template_Parameter(const Payload_Template_Parameter& from);
  Payload_Template_Parameter(Payload_Template_Parameter&& from) noexcept
    : Payload_Template_Parameter() {
    *this = ::std::move(from);
  }

  inline Payload_Template_Parameter& operator=(const Payload_Template_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_Template_Parameter& operator=(Payload_Template_Parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_Template_Parameter& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 3,
    kLongValue = 4,
    kFloatValue = 5,
    kDoubleValue = 6,
    kBooleanValue = 7,
    kStringValue = 8,
    kExtensionValue = 9,
    VALUE_NOT_SET = 0,
  };

  static inline const Payload_Template_Parameter* internal_default_instance() {
    return reinterpret_cast<const Payload_Template_Parameter*>(
               &_Payload_Template_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Payload_Template_Parameter& a, Payload_Template_Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_Template_Parameter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_Template_Parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_Template_Parameter* New() const final {
    return new Payload_Template_Parameter();
  }

  Payload_Template_Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_Template_Parameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_Template_Parameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_Template_Parameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_Template_Parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter";
  }
  protected:
  explicit Payload_Template_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Payload_Template_Parameter_ParameterValueExtension ParameterValueExtension;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kLongValueFieldNumber = 4,
    kFloatValueFieldNumber = 5,
    kDoubleValueFieldNumber = 6,
    kBooleanValueFieldNumber = 7,
    kStringValueFieldNumber = 8,
    kExtensionValueFieldNumber = 9,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 int_value = 3;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 long_value = 4;
  bool has_long_value() const;
  private:
  bool _internal_has_long_value() const;
  public:
  void clear_long_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 long_value() const;
  void set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_long_value() const;
  void _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float float_value = 5;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // double double_value = 6;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // bool boolean_value = 7;
  bool has_boolean_value() const;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  bool boolean_value() const;
  void set_boolean_value(bool value);
  private:
  bool _internal_boolean_value() const;
  void _internal_set_boolean_value(bool value);
  public:

  // string string_value = 8;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension extension_value = 9;
  bool has_extension_value() const;
  private:
  bool _internal_has_extension_value() const;
  public:
  void clear_extension_value();
  const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension& extension_value() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* release_extension_value();
  ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* mutable_extension_value();
  void set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* extension_value);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension& _internal_extension_value() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* _internal_mutable_extension_value();
  public:
  void unsafe_arena_set_allocated_extension_value(
      ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* extension_value);
  ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* unsafe_arena_release_extension_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_long_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_boolean_value();
  void set_has_string_value();
  void set_has_extension_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 int_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 long_value_;
    float float_value_;
    double double_value_;
    bool boolean_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* extension_value_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_Template final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.Template) */ {
 public:
  inline Payload_Template() : Payload_Template(nullptr) {}
  ~Payload_Template() override;
  explicit constexpr Payload_Template(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_Template(const Payload_Template& from);
  Payload_Template(Payload_Template&& from) noexcept
    : Payload_Template() {
    *this = ::std::move(from);
  }

  inline Payload_Template& operator=(const Payload_Template& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_Template& operator=(Payload_Template&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_Template& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_Template* internal_default_instance() {
    return reinterpret_cast<const Payload_Template*>(
               &_Payload_Template_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Payload_Template& a, Payload_Template& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_Template* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_Template* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_Template* New() const final {
    return new Payload_Template();
  }

  Payload_Template* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_Template>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_Template& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_Template& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_Template* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.Template";
  }
  protected:
  explicit Payload_Template(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Payload_Template_Parameter Parameter;

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 2,
    kParametersFieldNumber = 3,
    kVersionFieldNumber = 1,
    kTemplateRefFieldNumber = 4,
    kIsDefinitionFieldNumber = 5,
  };
  // repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >*
      mutable_metrics();
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_Metric& _internal_metrics(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric* _internal_add_metrics();
  public:
  const ::com::cirruslink::sparkplug::protobuf::Payload_Metric& metrics(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >&
      metrics() const;

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter >*
      mutable_parameters();
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter& _internal_parameters(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter* _internal_add_parameters();
  public:
  const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter& parameters(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter >&
      parameters() const;

  // optional string version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string template_ref = 4;
  bool has_template_ref() const;
  private:
  bool _internal_has_template_ref() const;
  public:
  void clear_template_ref();
  const std::string& template_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_ref();
  PROTOBUF_MUST_USE_RESULT std::string* release_template_ref();
  void set_allocated_template_ref(std::string* template_ref);
  private:
  const std::string& _internal_template_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_ref(const std::string& value);
  std::string* _internal_mutable_template_ref();
  public:

  // optional bool is_definition = 5;
  bool has_is_definition() const;
  private:
  bool _internal_has_is_definition() const;
  public:
  void clear_is_definition();
  bool is_definition() const;
  void set_is_definition(bool value);
  private:
  bool _internal_is_definition() const;
  void _internal_set_is_definition(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_Template)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.Template)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_ref_;
  bool is_definition_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_DataSet_DataSetValue_DataSetValueExtension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension) */ {
 public:
  inline Payload_DataSet_DataSetValue_DataSetValueExtension() : Payload_DataSet_DataSetValue_DataSetValueExtension(nullptr) {}
  ~Payload_DataSet_DataSetValue_DataSetValueExtension() override;
  explicit constexpr Payload_DataSet_DataSetValue_DataSetValueExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_DataSet_DataSetValue_DataSetValueExtension(const Payload_DataSet_DataSetValue_DataSetValueExtension& from);
  Payload_DataSet_DataSetValue_DataSetValueExtension(Payload_DataSet_DataSetValue_DataSetValueExtension&& from) noexcept
    : Payload_DataSet_DataSetValue_DataSetValueExtension() {
    *this = ::std::move(from);
  }

  inline Payload_DataSet_DataSetValue_DataSetValueExtension& operator=(const Payload_DataSet_DataSetValue_DataSetValueExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_DataSet_DataSetValue_DataSetValueExtension& operator=(Payload_DataSet_DataSetValue_DataSetValueExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_DataSet_DataSetValue_DataSetValueExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_DataSet_DataSetValue_DataSetValueExtension* internal_default_instance() {
    return reinterpret_cast<const Payload_DataSet_DataSetValue_DataSetValueExtension*>(
               &_Payload_DataSet_DataSetValue_DataSetValueExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Payload_DataSet_DataSetValue_DataSetValueExtension& a, Payload_DataSet_DataSetValue_DataSetValueExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_DataSet_DataSetValue_DataSetValueExtension* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_DataSet_DataSetValue_DataSetValueExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_DataSet_DataSetValue_DataSetValueExtension* New() const final {
    return new Payload_DataSet_DataSetValue_DataSetValueExtension();
  }

  Payload_DataSet_DataSetValue_DataSetValueExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_DataSet_DataSetValue_DataSetValueExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_DataSet_DataSetValue_DataSetValueExtension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_DataSet_DataSetValue_DataSetValueExtension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_DataSet_DataSetValue_DataSetValueExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension";
  }
  protected:
  explicit Payload_DataSet_DataSetValue_DataSetValueExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_DataSet_DataSetValue_DataSetValueExtension)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_DataSet_DataSetValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue) */ {
 public:
  inline Payload_DataSet_DataSetValue() : Payload_DataSet_DataSetValue(nullptr) {}
  ~Payload_DataSet_DataSetValue() override;
  explicit constexpr Payload_DataSet_DataSetValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_DataSet_DataSetValue(const Payload_DataSet_DataSetValue& from);
  Payload_DataSet_DataSetValue(Payload_DataSet_DataSetValue&& from) noexcept
    : Payload_DataSet_DataSetValue() {
    *this = ::std::move(from);
  }

  inline Payload_DataSet_DataSetValue& operator=(const Payload_DataSet_DataSetValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_DataSet_DataSetValue& operator=(Payload_DataSet_DataSetValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_DataSet_DataSetValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 1,
    kLongValue = 2,
    kFloatValue = 3,
    kDoubleValue = 4,
    kBooleanValue = 5,
    kStringValue = 6,
    kExtensionValue = 7,
    VALUE_NOT_SET = 0,
  };

  static inline const Payload_DataSet_DataSetValue* internal_default_instance() {
    return reinterpret_cast<const Payload_DataSet_DataSetValue*>(
               &_Payload_DataSet_DataSetValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Payload_DataSet_DataSetValue& a, Payload_DataSet_DataSetValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_DataSet_DataSetValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_DataSet_DataSetValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_DataSet_DataSetValue* New() const final {
    return new Payload_DataSet_DataSetValue();
  }

  Payload_DataSet_DataSetValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_DataSet_DataSetValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_DataSet_DataSetValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_DataSet_DataSetValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_DataSet_DataSetValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue";
  }
  protected:
  explicit Payload_DataSet_DataSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Payload_DataSet_DataSetValue_DataSetValueExtension DataSetValueExtension;

  // accessors -------------------------------------------------------

  enum : int {
    kIntValueFieldNumber = 1,
    kLongValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kDoubleValueFieldNumber = 4,
    kBooleanValueFieldNumber = 5,
    kStringValueFieldNumber = 6,
    kExtensionValueFieldNumber = 7,
  };
  // uint32 int_value = 1;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 long_value = 2;
  bool has_long_value() const;
  private:
  bool _internal_has_long_value() const;
  public:
  void clear_long_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 long_value() const;
  void set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_long_value() const;
  void _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float float_value = 3;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // double double_value = 4;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // bool boolean_value = 5;
  bool has_boolean_value() const;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  bool boolean_value() const;
  void set_boolean_value(bool value);
  private:
  bool _internal_boolean_value() const;
  void _internal_set_boolean_value(bool value);
  public:

  // string string_value = 6;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension extension_value = 7;
  bool has_extension_value() const;
  private:
  bool _internal_has_extension_value() const;
  public:
  void clear_extension_value();
  const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension& extension_value() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* release_extension_value();
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* mutable_extension_value();
  void set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* extension_value);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension& _internal_extension_value() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* _internal_mutable_extension_value();
  public:
  void unsafe_arena_set_allocated_extension_value(
      ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* extension_value);
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* unsafe_arena_release_extension_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_long_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_boolean_value();
  void set_has_string_value();
  void set_has_extension_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 int_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 long_value_;
    float float_value_;
    double double_value_;
    bool boolean_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* extension_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_DataSet_Row final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row) */ {
 public:
  inline Payload_DataSet_Row() : Payload_DataSet_Row(nullptr) {}
  ~Payload_DataSet_Row() override;
  explicit constexpr Payload_DataSet_Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_DataSet_Row(const Payload_DataSet_Row& from);
  Payload_DataSet_Row(Payload_DataSet_Row&& from) noexcept
    : Payload_DataSet_Row() {
    *this = ::std::move(from);
  }

  inline Payload_DataSet_Row& operator=(const Payload_DataSet_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_DataSet_Row& operator=(Payload_DataSet_Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_DataSet_Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_DataSet_Row* internal_default_instance() {
    return reinterpret_cast<const Payload_DataSet_Row*>(
               &_Payload_DataSet_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Payload_DataSet_Row& a, Payload_DataSet_Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_DataSet_Row* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_DataSet_Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_DataSet_Row* New() const final {
    return new Payload_DataSet_Row();
  }

  Payload_DataSet_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_DataSet_Row>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_DataSet_Row& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_DataSet_Row& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_DataSet_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row";
  }
  protected:
  explicit Payload_DataSet_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue >*
      mutable_elements();
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue& _internal_elements(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue* _internal_add_elements();
  public:
  const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue& elements(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue >&
      elements() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_DataSet_Row)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_DataSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.DataSet) */ {
 public:
  inline Payload_DataSet() : Payload_DataSet(nullptr) {}
  ~Payload_DataSet() override;
  explicit constexpr Payload_DataSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_DataSet(const Payload_DataSet& from);
  Payload_DataSet(Payload_DataSet&& from) noexcept
    : Payload_DataSet() {
    *this = ::std::move(from);
  }

  inline Payload_DataSet& operator=(const Payload_DataSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_DataSet& operator=(Payload_DataSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_DataSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_DataSet* internal_default_instance() {
    return reinterpret_cast<const Payload_DataSet*>(
               &_Payload_DataSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Payload_DataSet& a, Payload_DataSet& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_DataSet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_DataSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_DataSet* New() const final {
    return new Payload_DataSet();
  }

  Payload_DataSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_DataSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_DataSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_DataSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_DataSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.DataSet";
  }
  protected:
  explicit Payload_DataSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Payload_DataSet_DataSetValue DataSetValue;
  typedef Payload_DataSet_Row Row;

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 2,
    kTypesFieldNumber = 3,
    kRowsFieldNumber = 4,
    kNumOfColumnsFieldNumber = 1,
  };
  // repeated string columns = 2;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  const std::string& columns(int index) const;
  std::string* mutable_columns(int index);
  void set_columns(int index, const std::string& value);
  void set_columns(int index, std::string&& value);
  void set_columns(int index, const char* value);
  void set_columns(int index, const char* value, size_t size);
  std::string* add_columns();
  void add_columns(const std::string& value);
  void add_columns(std::string&& value);
  void add_columns(const char* value);
  void add_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_columns();
  private:
  const std::string& _internal_columns(int index) const;
  std::string* _internal_add_columns();
  public:

  // repeated uint32 types = 3;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_types() const;
  void _internal_add_types(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_types();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 types(int index) const;
  void set_types(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_types(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_types();

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row rows = 4;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row >*
      mutable_rows();
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row& _internal_rows(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row* _internal_add_rows();
  public:
  const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row& rows(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row >&
      rows() const;

  // optional uint64 num_of_columns = 1;
  bool has_num_of_columns() const;
  private:
  bool _internal_has_num_of_columns() const;
  public:
  void clear_num_of_columns();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_of_columns() const;
  void set_num_of_columns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_of_columns() const;
  void _internal_set_num_of_columns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_DataSet)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row > rows_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_of_columns_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_PropertyValue_PropertyValueExtension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension) */ {
 public:
  inline Payload_PropertyValue_PropertyValueExtension() : Payload_PropertyValue_PropertyValueExtension(nullptr) {}
  ~Payload_PropertyValue_PropertyValueExtension() override;
  explicit constexpr Payload_PropertyValue_PropertyValueExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_PropertyValue_PropertyValueExtension(const Payload_PropertyValue_PropertyValueExtension& from);
  Payload_PropertyValue_PropertyValueExtension(Payload_PropertyValue_PropertyValueExtension&& from) noexcept
    : Payload_PropertyValue_PropertyValueExtension() {
    *this = ::std::move(from);
  }

  inline Payload_PropertyValue_PropertyValueExtension& operator=(const Payload_PropertyValue_PropertyValueExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_PropertyValue_PropertyValueExtension& operator=(Payload_PropertyValue_PropertyValueExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_PropertyValue_PropertyValueExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_PropertyValue_PropertyValueExtension* internal_default_instance() {
    return reinterpret_cast<const Payload_PropertyValue_PropertyValueExtension*>(
               &_Payload_PropertyValue_PropertyValueExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Payload_PropertyValue_PropertyValueExtension& a, Payload_PropertyValue_PropertyValueExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_PropertyValue_PropertyValueExtension* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_PropertyValue_PropertyValueExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_PropertyValue_PropertyValueExtension* New() const final {
    return new Payload_PropertyValue_PropertyValueExtension();
  }

  Payload_PropertyValue_PropertyValueExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_PropertyValue_PropertyValueExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_PropertyValue_PropertyValueExtension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_PropertyValue_PropertyValueExtension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_PropertyValue_PropertyValueExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension";
  }
  protected:
  explicit Payload_PropertyValue_PropertyValueExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_PropertyValue_PropertyValueExtension)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue) */ {
 public:
  inline Payload_PropertyValue() : Payload_PropertyValue(nullptr) {}
  ~Payload_PropertyValue() override;
  explicit constexpr Payload_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_PropertyValue(const Payload_PropertyValue& from);
  Payload_PropertyValue(Payload_PropertyValue&& from) noexcept
    : Payload_PropertyValue() {
    *this = ::std::move(from);
  }

  inline Payload_PropertyValue& operator=(const Payload_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_PropertyValue& operator=(Payload_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 3,
    kLongValue = 4,
    kFloatValue = 5,
    kDoubleValue = 6,
    kBooleanValue = 7,
    kStringValue = 8,
    kPropertysetValue = 9,
    kPropertysetsValue = 10,
    kExtensionValue = 11,
    VALUE_NOT_SET = 0,
  };

  static inline const Payload_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const Payload_PropertyValue*>(
               &_Payload_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Payload_PropertyValue& a, Payload_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_PropertyValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_PropertyValue* New() const final {
    return new Payload_PropertyValue();
  }

  Payload_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_PropertyValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_PropertyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.PropertyValue";
  }
  protected:
  explicit Payload_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Payload_PropertyValue_PropertyValueExtension PropertyValueExtension;

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIsNullFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kLongValueFieldNumber = 4,
    kFloatValueFieldNumber = 5,
    kDoubleValueFieldNumber = 6,
    kBooleanValueFieldNumber = 7,
    kStringValueFieldNumber = 8,
    kPropertysetValueFieldNumber = 9,
    kPropertysetsValueFieldNumber = 10,
    kExtensionValueFieldNumber = 11,
  };
  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_null = 2;
  bool has_is_null() const;
  private:
  bool _internal_has_is_null() const;
  public:
  void clear_is_null();
  bool is_null() const;
  void set_is_null(bool value);
  private:
  bool _internal_is_null() const;
  void _internal_set_is_null(bool value);
  public:

  // uint32 int_value = 3;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 long_value = 4;
  bool has_long_value() const;
  private:
  bool _internal_has_long_value() const;
  public:
  void clear_long_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 long_value() const;
  void set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_long_value() const;
  void _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float float_value = 5;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // double double_value = 6;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // bool boolean_value = 7;
  bool has_boolean_value() const;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  bool boolean_value() const;
  void set_boolean_value(bool value);
  private:
  bool _internal_boolean_value() const;
  void _internal_set_boolean_value(bool value);
  public:

  // string string_value = 8;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .com.cirruslink.sparkplug.protobuf.Payload.PropertySet propertyset_value = 9;
  bool has_propertyset_value() const;
  private:
  bool _internal_has_propertyset_value() const;
  public:
  void clear_propertyset_value();
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& propertyset_value() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* release_propertyset_value();
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* mutable_propertyset_value();
  void set_allocated_propertyset_value(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* propertyset_value);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& _internal_propertyset_value() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* _internal_mutable_propertyset_value();
  public:
  void unsafe_arena_set_allocated_propertyset_value(
      ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* propertyset_value);
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* unsafe_arena_release_propertyset_value();

  // .com.cirruslink.sparkplug.protobuf.Payload.PropertySetList propertysets_value = 10;
  bool has_propertysets_value() const;
  private:
  bool _internal_has_propertysets_value() const;
  public:
  void clear_propertysets_value();
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList& propertysets_value() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* release_propertysets_value();
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* mutable_propertysets_value();
  void set_allocated_propertysets_value(::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* propertysets_value);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList& _internal_propertysets_value() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* _internal_mutable_propertysets_value();
  public:
  void unsafe_arena_set_allocated_propertysets_value(
      ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* propertysets_value);
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* unsafe_arena_release_propertysets_value();

  // .com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension extension_value = 11;
  bool has_extension_value() const;
  private:
  bool _internal_has_extension_value() const;
  public:
  void clear_extension_value();
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension& extension_value() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* release_extension_value();
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* mutable_extension_value();
  void set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* extension_value);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension& _internal_extension_value() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* _internal_mutable_extension_value();
  public:
  void unsafe_arena_set_allocated_extension_value(
      ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* extension_value);
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* unsafe_arena_release_extension_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_long_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_boolean_value();
  void set_has_string_value();
  void set_has_propertyset_value();
  void set_has_propertysets_value();
  void set_has_extension_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  bool is_null_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 int_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 long_value_;
    float float_value_;
    double double_value_;
    bool boolean_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* propertyset_value_;
    ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* propertysets_value_;
    ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* extension_value_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_PropertySet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.PropertySet) */ {
 public:
  inline Payload_PropertySet() : Payload_PropertySet(nullptr) {}
  ~Payload_PropertySet() override;
  explicit constexpr Payload_PropertySet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_PropertySet(const Payload_PropertySet& from);
  Payload_PropertySet(Payload_PropertySet&& from) noexcept
    : Payload_PropertySet() {
    *this = ::std::move(from);
  }

  inline Payload_PropertySet& operator=(const Payload_PropertySet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_PropertySet& operator=(Payload_PropertySet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_PropertySet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_PropertySet* internal_default_instance() {
    return reinterpret_cast<const Payload_PropertySet*>(
               &_Payload_PropertySet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Payload_PropertySet& a, Payload_PropertySet& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_PropertySet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_PropertySet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_PropertySet* New() const final {
    return new Payload_PropertySet();
  }

  Payload_PropertySet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_PropertySet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_PropertySet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_PropertySet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_PropertySet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.PropertySet";
  }
  protected:
  explicit Payload_PropertySet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated string keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertyValue values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue >*
      mutable_values();
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue& _internal_values(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue* _internal_add_values();
  public:
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue& values(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue >&
      values() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_PropertySet)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_PropertySetList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList) */ {
 public:
  inline Payload_PropertySetList() : Payload_PropertySetList(nullptr) {}
  ~Payload_PropertySetList() override;
  explicit constexpr Payload_PropertySetList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_PropertySetList(const Payload_PropertySetList& from);
  Payload_PropertySetList(Payload_PropertySetList&& from) noexcept
    : Payload_PropertySetList() {
    *this = ::std::move(from);
  }

  inline Payload_PropertySetList& operator=(const Payload_PropertySetList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_PropertySetList& operator=(Payload_PropertySetList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_PropertySetList& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_PropertySetList* internal_default_instance() {
    return reinterpret_cast<const Payload_PropertySetList*>(
               &_Payload_PropertySetList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Payload_PropertySetList& a, Payload_PropertySetList& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_PropertySetList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_PropertySetList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_PropertySetList* New() const final {
    return new Payload_PropertySetList();
  }

  Payload_PropertySetList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_PropertySetList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_PropertySetList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_PropertySetList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_PropertySetList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.PropertySetList";
  }
  protected:
  explicit Payload_PropertySetList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertysetFieldNumber = 1,
  };
  // repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertySet propertyset = 1;
  int propertyset_size() const;
  private:
  int _internal_propertyset_size() const;
  public:
  void clear_propertyset();
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* mutable_propertyset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet >*
      mutable_propertyset();
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& _internal_propertyset(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* _internal_add_propertyset();
  public:
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& propertyset(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* add_propertyset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet >&
      propertyset() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_PropertySetList)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet > propertyset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_MetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.MetaData) */ {
 public:
  inline Payload_MetaData() : Payload_MetaData(nullptr) {}
  ~Payload_MetaData() override;
  explicit constexpr Payload_MetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_MetaData(const Payload_MetaData& from);
  Payload_MetaData(Payload_MetaData&& from) noexcept
    : Payload_MetaData() {
    *this = ::std::move(from);
  }

  inline Payload_MetaData& operator=(const Payload_MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_MetaData& operator=(Payload_MetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_MetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_MetaData* internal_default_instance() {
    return reinterpret_cast<const Payload_MetaData*>(
               &_Payload_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Payload_MetaData& a, Payload_MetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_MetaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_MetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_MetaData* New() const final {
    return new Payload_MetaData();
  }

  Payload_MetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_MetaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_MetaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_MetaData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_MetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.MetaData";
  }
  protected:
  explicit Payload_MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 2,
    kFileNameFieldNumber = 5,
    kFileTypeFieldNumber = 6,
    kMd5FieldNumber = 7,
    kDescriptionFieldNumber = 8,
    kSizeFieldNumber = 3,
    kSeqFieldNumber = 4,
    kIsMultiPartFieldNumber = 1,
  };
  // optional string content_type = 2;
  bool has_content_type() const;
  private:
  bool _internal_has_content_type() const;
  public:
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // optional string file_name = 5;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional string file_type = 6;
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  const std::string& file_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_type();
  void set_allocated_file_type(std::string* file_type);
  private:
  const std::string& _internal_file_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_type(const std::string& value);
  std::string* _internal_mutable_file_type();
  public:

  // optional string md5 = 7;
  bool has_md5() const;
  private:
  bool _internal_has_md5() const;
  public:
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_MUST_USE_RESULT std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // optional string description = 8;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional uint64 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 seq = 4;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_multi_part = 1;
  bool has_is_multi_part() const;
  private:
  bool _internal_has_is_multi_part() const;
  public:
  void clear_is_multi_part();
  bool is_multi_part() const;
  void set_is_multi_part(bool value);
  private:
  bool _internal_is_multi_part() const;
  void _internal_set_is_multi_part(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_MetaData)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  bool is_multi_part_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_Metric_MetricValueExtension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension) */ {
 public:
  inline Payload_Metric_MetricValueExtension() : Payload_Metric_MetricValueExtension(nullptr) {}
  ~Payload_Metric_MetricValueExtension() override;
  explicit constexpr Payload_Metric_MetricValueExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_Metric_MetricValueExtension(const Payload_Metric_MetricValueExtension& from);
  Payload_Metric_MetricValueExtension(Payload_Metric_MetricValueExtension&& from) noexcept
    : Payload_Metric_MetricValueExtension() {
    *this = ::std::move(from);
  }

  inline Payload_Metric_MetricValueExtension& operator=(const Payload_Metric_MetricValueExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_Metric_MetricValueExtension& operator=(Payload_Metric_MetricValueExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_Metric_MetricValueExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload_Metric_MetricValueExtension* internal_default_instance() {
    return reinterpret_cast<const Payload_Metric_MetricValueExtension*>(
               &_Payload_Metric_MetricValueExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Payload_Metric_MetricValueExtension& a, Payload_Metric_MetricValueExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_Metric_MetricValueExtension* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_Metric_MetricValueExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_Metric_MetricValueExtension* New() const final {
    return new Payload_Metric_MetricValueExtension();
  }

  Payload_Metric_MetricValueExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_Metric_MetricValueExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_Metric_MetricValueExtension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_Metric_MetricValueExtension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_Metric_MetricValueExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension";
  }
  protected:
  explicit Payload_Metric_MetricValueExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload_Metric_MetricValueExtension)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload_Metric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload.Metric) */ {
 public:
  inline Payload_Metric() : Payload_Metric(nullptr) {}
  ~Payload_Metric() override;
  explicit constexpr Payload_Metric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_Metric(const Payload_Metric& from);
  Payload_Metric(Payload_Metric&& from) noexcept
    : Payload_Metric() {
    *this = ::std::move(from);
  }

  inline Payload_Metric& operator=(const Payload_Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_Metric& operator=(Payload_Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_Metric& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 10,
    kLongValue = 11,
    kFloatValue = 12,
    kDoubleValue = 13,
    kBooleanValue = 14,
    kStringValue = 15,
    kBytesValue = 16,
    kDatasetValue = 17,
    kTemplateValue = 18,
    kExtensionValue = 19,
    VALUE_NOT_SET = 0,
  };

  static inline const Payload_Metric* internal_default_instance() {
    return reinterpret_cast<const Payload_Metric*>(
               &_Payload_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Payload_Metric& a, Payload_Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_Metric* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload_Metric* New() const final {
    return new Payload_Metric();
  }

  Payload_Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload_Metric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_Metric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_Metric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload.Metric";
  }
  protected:
  explicit Payload_Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Payload_Metric_MetricValueExtension MetricValueExtension;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMetadataFieldNumber = 8,
    kPropertiesFieldNumber = 9,
    kAliasFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kDatatypeFieldNumber = 4,
    kIsHistoricalFieldNumber = 5,
    kIsTransientFieldNumber = 6,
    kIsNullFieldNumber = 7,
    kIntValueFieldNumber = 10,
    kLongValueFieldNumber = 11,
    kFloatValueFieldNumber = 12,
    kDoubleValueFieldNumber = 13,
    kBooleanValueFieldNumber = 14,
    kStringValueFieldNumber = 15,
    kBytesValueFieldNumber = 16,
    kDatasetValueFieldNumber = 17,
    kTemplateValueFieldNumber = 18,
    kExtensionValueFieldNumber = 19,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .com.cirruslink.sparkplug.protobuf.Payload.MetaData metadata = 8;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::com::cirruslink::sparkplug::protobuf::Payload_MetaData& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* release_metadata();
  ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* mutable_metadata();
  void set_allocated_metadata(::com::cirruslink::sparkplug::protobuf::Payload_MetaData* metadata);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_MetaData& _internal_metadata() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* metadata);
  ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* unsafe_arena_release_metadata();

  // optional .com.cirruslink.sparkplug.protobuf.Payload.PropertySet properties = 9;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& properties() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* release_properties();
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* mutable_properties();
  void set_allocated_properties(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* properties);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& _internal_properties() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* properties);
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* unsafe_arena_release_properties();

  // optional uint64 alias = 2;
  bool has_alias() const;
  private:
  bool _internal_has_alias() const;
  public:
  void clear_alias();
  ::PROTOBUF_NAMESPACE_ID::uint64 alias() const;
  void set_alias(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_alias() const;
  void _internal_set_alias(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 datatype = 4;
  bool has_datatype() const;
  private:
  bool _internal_has_datatype() const;
  public:
  void clear_datatype();
  ::PROTOBUF_NAMESPACE_ID::uint32 datatype() const;
  void set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datatype() const;
  void _internal_set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_historical = 5;
  bool has_is_historical() const;
  private:
  bool _internal_has_is_historical() const;
  public:
  void clear_is_historical();
  bool is_historical() const;
  void set_is_historical(bool value);
  private:
  bool _internal_is_historical() const;
  void _internal_set_is_historical(bool value);
  public:

  // optional bool is_transient = 6;
  bool has_is_transient() const;
  private:
  bool _internal_has_is_transient() const;
  public:
  void clear_is_transient();
  bool is_transient() const;
  void set_is_transient(bool value);
  private:
  bool _internal_is_transient() const;
  void _internal_set_is_transient(bool value);
  public:

  // optional bool is_null = 7;
  bool has_is_null() const;
  private:
  bool _internal_has_is_null() const;
  public:
  void clear_is_null();
  bool is_null() const;
  void set_is_null(bool value);
  private:
  bool _internal_is_null() const;
  void _internal_set_is_null(bool value);
  public:

  // uint32 int_value = 10;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 long_value = 11;
  bool has_long_value() const;
  private:
  bool _internal_has_long_value() const;
  public:
  void clear_long_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 long_value() const;
  void set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_long_value() const;
  void _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float float_value = 12;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // double double_value = 13;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // bool boolean_value = 14;
  bool has_boolean_value() const;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  bool boolean_value() const;
  void set_boolean_value(bool value);
  private:
  bool _internal_boolean_value() const;
  void _internal_set_boolean_value(bool value);
  public:

  // string string_value = 15;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes bytes_value = 16;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  // .com.cirruslink.sparkplug.protobuf.Payload.DataSet dataset_value = 17;
  bool has_dataset_value() const;
  private:
  bool _internal_has_dataset_value() const;
  public:
  void clear_dataset_value();
  const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet& dataset_value() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* release_dataset_value();
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* mutable_dataset_value();
  void set_allocated_dataset_value(::com::cirruslink::sparkplug::protobuf::Payload_DataSet* dataset_value);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet& _internal_dataset_value() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* _internal_mutable_dataset_value();
  public:
  void unsafe_arena_set_allocated_dataset_value(
      ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* dataset_value);
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* unsafe_arena_release_dataset_value();

  // .com.cirruslink.sparkplug.protobuf.Payload.Template template_value = 18;
  bool has_template_value() const;
  private:
  bool _internal_has_template_value() const;
  public:
  void clear_template_value();
  const ::com::cirruslink::sparkplug::protobuf::Payload_Template& template_value() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_Template* release_template_value();
  ::com::cirruslink::sparkplug::protobuf::Payload_Template* mutable_template_value();
  void set_allocated_template_value(::com::cirruslink::sparkplug::protobuf::Payload_Template* template_value);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_Template& _internal_template_value() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_Template* _internal_mutable_template_value();
  public:
  void unsafe_arena_set_allocated_template_value(
      ::com::cirruslink::sparkplug::protobuf::Payload_Template* template_value);
  ::com::cirruslink::sparkplug::protobuf::Payload_Template* unsafe_arena_release_template_value();

  // .com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension extension_value = 19;
  bool has_extension_value() const;
  private:
  bool _internal_has_extension_value() const;
  public:
  void clear_extension_value();
  const ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension& extension_value() const;
  PROTOBUF_MUST_USE_RESULT ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* release_extension_value();
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* mutable_extension_value();
  void set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* extension_value);
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension& _internal_extension_value() const;
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* _internal_mutable_extension_value();
  public:
  void unsafe_arena_set_allocated_extension_value(
      ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* extension_value);
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* unsafe_arena_release_extension_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload.Metric)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_long_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_boolean_value();
  void set_has_string_value();
  void set_has_bytes_value();
  void set_has_dataset_value();
  void set_has_template_value();
  void set_has_extension_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* metadata_;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* properties_;
  ::PROTOBUF_NAMESPACE_ID::uint64 alias_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datatype_;
  bool is_historical_;
  bool is_transient_;
  bool is_null_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 int_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 long_value_;
    float float_value_;
    double double_value_;
    bool boolean_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
    ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* dataset_value_;
    ::com::cirruslink::sparkplug::protobuf::Payload_Template* template_value_;
    ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* extension_value_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// -------------------------------------------------------------------

class Payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.cirruslink.sparkplug.protobuf.Payload) */ {
 public:
  inline Payload() : Payload(nullptr) {}
  ~Payload() override;
  explicit constexpr Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload(const Payload& from);
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload* New() const final {
    return new Payload();
  }

  Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.cirruslink.sparkplug.protobuf.Payload";
  }
  protected:
  explicit Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Payload_Template Template;
  typedef Payload_DataSet DataSet;
  typedef Payload_PropertyValue PropertyValue;
  typedef Payload_PropertySet PropertySet;
  typedef Payload_PropertySetList PropertySetList;
  typedef Payload_MetaData MetaData;
  typedef Payload_Metric Metric;

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 2,
    kUuidFieldNumber = 4,
    kBodyFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kSeqFieldNumber = 3,
  };
  // repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >*
      mutable_metrics();
  private:
  const ::com::cirruslink::sparkplug::protobuf::Payload_Metric& _internal_metrics(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric* _internal_add_metrics();
  public:
  const ::com::cirruslink::sparkplug::protobuf::Payload_Metric& metrics(int index) const;
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >&
      metrics() const;

  // optional string uuid = 4;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional bytes body = 5;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_MUST_USE_RESULT std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 seq = 3;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Payload)
  // @@protoc_insertion_point(class_scope:com.cirruslink.sparkplug.protobuf.Payload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  friend struct ::TableStruct_sparkplug_5fb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Payload_Template_Parameter_ParameterValueExtension

// -------------------------------------------------------------------

// Payload_Template_Parameter

// optional string name = 1;
inline bool Payload_Template_Parameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Payload_Template_Parameter::has_name() const {
  return _internal_has_name();
}
inline void Payload_Template_Parameter::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Payload_Template_Parameter::name() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload_Template_Parameter::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.name)
}
inline std::string* Payload_Template_Parameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.name)
  return _s;
}
inline const std::string& Payload_Template_Parameter::_internal_name() const {
  return name_.Get();
}
inline void Payload_Template_Parameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_Template_Parameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_Template_Parameter::release_name() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload_Template_Parameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.name)
}

// optional uint32 type = 2;
inline bool Payload_Template_Parameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Payload_Template_Parameter::has_type() const {
  return _internal_has_type();
}
inline void Payload_Template_Parameter::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_Template_Parameter::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_Template_Parameter::type() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.type)
  return _internal_type();
}
inline void Payload_Template_Parameter::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Payload_Template_Parameter::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.type)
}

// uint32 int_value = 3;
inline bool Payload_Template_Parameter::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool Payload_Template_Parameter::has_int_value() const {
  return _internal_has_int_value();
}
inline void Payload_Template_Parameter::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void Payload_Template_Parameter::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = 0u;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_Template_Parameter::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return 0u;
}
inline void Payload_Template_Parameter::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_Template_Parameter::int_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.int_value)
  return _internal_int_value();
}
inline void Payload_Template_Parameter::set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.int_value)
}

// uint64 long_value = 4;
inline bool Payload_Template_Parameter::_internal_has_long_value() const {
  return value_case() == kLongValue;
}
inline bool Payload_Template_Parameter::has_long_value() const {
  return _internal_has_long_value();
}
inline void Payload_Template_Parameter::set_has_long_value() {
  _oneof_case_[0] = kLongValue;
}
inline void Payload_Template_Parameter::clear_long_value() {
  if (_internal_has_long_value()) {
    value_.long_value_ = uint64_t{0u};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_Template_Parameter::_internal_long_value() const {
  if (_internal_has_long_value()) {
    return value_.long_value_;
  }
  return uint64_t{0u};
}
inline void Payload_Template_Parameter::_internal_set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_long_value()) {
    clear_value();
    set_has_long_value();
  }
  value_.long_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_Template_Parameter::long_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.long_value)
  return _internal_long_value();
}
inline void Payload_Template_Parameter::set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_long_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.long_value)
}

// float float_value = 5;
inline bool Payload_Template_Parameter::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool Payload_Template_Parameter::has_float_value() const {
  return _internal_has_float_value();
}
inline void Payload_Template_Parameter::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Payload_Template_Parameter::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float Payload_Template_Parameter::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void Payload_Template_Parameter::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline float Payload_Template_Parameter::float_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.float_value)
  return _internal_float_value();
}
inline void Payload_Template_Parameter::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.float_value)
}

// double double_value = 6;
inline bool Payload_Template_Parameter::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool Payload_Template_Parameter::has_double_value() const {
  return _internal_has_double_value();
}
inline void Payload_Template_Parameter::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Payload_Template_Parameter::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double Payload_Template_Parameter::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void Payload_Template_Parameter::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double Payload_Template_Parameter::double_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.double_value)
  return _internal_double_value();
}
inline void Payload_Template_Parameter::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.double_value)
}

// bool boolean_value = 7;
inline bool Payload_Template_Parameter::_internal_has_boolean_value() const {
  return value_case() == kBooleanValue;
}
inline bool Payload_Template_Parameter::has_boolean_value() const {
  return _internal_has_boolean_value();
}
inline void Payload_Template_Parameter::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void Payload_Template_Parameter::clear_boolean_value() {
  if (_internal_has_boolean_value()) {
    value_.boolean_value_ = false;
    clear_has_value();
  }
}
inline bool Payload_Template_Parameter::_internal_boolean_value() const {
  if (_internal_has_boolean_value()) {
    return value_.boolean_value_;
  }
  return false;
}
inline void Payload_Template_Parameter::_internal_set_boolean_value(bool value) {
  if (!_internal_has_boolean_value()) {
    clear_value();
    set_has_boolean_value();
  }
  value_.boolean_value_ = value;
}
inline bool Payload_Template_Parameter::boolean_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.boolean_value)
  return _internal_boolean_value();
}
inline void Payload_Template_Parameter::set_boolean_value(bool value) {
  _internal_set_boolean_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.boolean_value)
}

// string string_value = 8;
inline bool Payload_Template_Parameter::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool Payload_Template_Parameter::has_string_value() const {
  return _internal_has_string_value();
}
inline void Payload_Template_Parameter::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Payload_Template_Parameter::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& Payload_Template_Parameter::string_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Payload_Template_Parameter::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.string_value)
}
inline std::string* Payload_Template_Parameter::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.string_value)
  return _s;
}
inline const std::string& Payload_Template_Parameter::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Payload_Template_Parameter::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_Template_Parameter::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_Template_Parameter::release_string_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Payload_Template_Parameter::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.string_value)
}

// .com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension extension_value = 9;
inline bool Payload_Template_Parameter::_internal_has_extension_value() const {
  return value_case() == kExtensionValue;
}
inline bool Payload_Template_Parameter::has_extension_value() const {
  return _internal_has_extension_value();
}
inline void Payload_Template_Parameter::set_has_extension_value() {
  _oneof_case_[0] = kExtensionValue;
}
inline void Payload_Template_Parameter::clear_extension_value() {
  if (_internal_has_extension_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.extension_value_;
    }
    clear_has_value();
  }
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* Payload_Template_Parameter::release_extension_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.extension_value)
  if (_internal_has_extension_value()) {
    clear_has_value();
      ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* temp = value_.extension_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.extension_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension& Payload_Template_Parameter::_internal_extension_value() const {
  return _internal_has_extension_value()
      ? *value_.extension_value_
      : reinterpret_cast< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension&>(::com::cirruslink::sparkplug::protobuf::_Payload_Template_Parameter_ParameterValueExtension_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension& Payload_Template_Parameter::extension_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.extension_value)
  return _internal_extension_value();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* Payload_Template_Parameter::unsafe_arena_release_extension_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.extension_value)
  if (_internal_has_extension_value()) {
    clear_has_value();
    ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* temp = value_.extension_value_;
    value_.extension_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_Template_Parameter::unsafe_arena_set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* extension_value) {
  clear_value();
  if (extension_value) {
    set_has_extension_value();
    value_.extension_value_ = extension_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.extension_value)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* Payload_Template_Parameter::_internal_mutable_extension_value() {
  if (!_internal_has_extension_value()) {
    clear_value();
    set_has_extension_value();
    value_.extension_value_ = CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension >(GetArenaForAllocation());
  }
  return value_.extension_value_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* Payload_Template_Parameter::mutable_extension_value() {
  ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* _msg = _internal_mutable_extension_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.extension_value)
  return _msg;
}

inline bool Payload_Template_Parameter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Payload_Template_Parameter::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Payload_Template_Parameter::ValueCase Payload_Template_Parameter::value_case() const {
  return Payload_Template_Parameter::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Payload_Template

// optional string version = 1;
inline bool Payload_Template::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Payload_Template::has_version() const {
  return _internal_has_version();
}
inline void Payload_Template::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Payload_Template::version() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload_Template::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.version)
}
inline std::string* Payload_Template::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Template.version)
  return _s;
}
inline const std::string& Payload_Template::_internal_version() const {
  return version_.Get();
}
inline void Payload_Template::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_Template::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_Template::release_version() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Template.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload_Template::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Template.version)
}

// repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
inline int Payload_Template::_internal_metrics_size() const {
  return metrics_.size();
}
inline int Payload_Template::metrics_size() const {
  return _internal_metrics_size();
}
inline void Payload_Template::clear_metrics() {
  metrics_.Clear();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric* Payload_Template::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Template.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >*
Payload_Template::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.Template.metrics)
  return &metrics_;
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Metric& Payload_Template::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Metric& Payload_Template::metrics(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.metrics)
  return _internal_metrics(index);
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric* Payload_Template::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric* Payload_Template::add_metrics() {
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric* _add = _internal_add_metrics();
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.Template.metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >&
Payload_Template::metrics() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.Template.metrics)
  return metrics_;
}

// repeated .com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter parameters = 3;
inline int Payload_Template::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Payload_Template::parameters_size() const {
  return _internal_parameters_size();
}
inline void Payload_Template::clear_parameters() {
  parameters_.Clear();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter* Payload_Template::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Template.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter >*
Payload_Template::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.Template.parameters)
  return &parameters_;
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter& Payload_Template::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter& Payload_Template::parameters(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.parameters)
  return _internal_parameters(index);
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter* Payload_Template::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter* Payload_Template::add_parameters() {
  ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.Template.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter >&
Payload_Template::parameters() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.Template.parameters)
  return parameters_;
}

// optional string template_ref = 4;
inline bool Payload_Template::_internal_has_template_ref() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Payload_Template::has_template_ref() const {
  return _internal_has_template_ref();
}
inline void Payload_Template::clear_template_ref() {
  template_ref_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Payload_Template::template_ref() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.template_ref)
  return _internal_template_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload_Template::set_template_ref(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 template_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.template_ref)
}
inline std::string* Payload_Template::mutable_template_ref() {
  std::string* _s = _internal_mutable_template_ref();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Template.template_ref)
  return _s;
}
inline const std::string& Payload_Template::_internal_template_ref() const {
  return template_ref_.Get();
}
inline void Payload_Template::_internal_set_template_ref(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  template_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_Template::_internal_mutable_template_ref() {
  _has_bits_[0] |= 0x00000002u;
  return template_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_Template::release_template_ref() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Template.template_ref)
  if (!_internal_has_template_ref()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return template_ref_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload_Template::set_allocated_template_ref(std::string* template_ref) {
  if (template_ref != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  template_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_ref,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Template.template_ref)
}

// optional bool is_definition = 5;
inline bool Payload_Template::_internal_has_is_definition() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Payload_Template::has_is_definition() const {
  return _internal_has_is_definition();
}
inline void Payload_Template::clear_is_definition() {
  is_definition_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Payload_Template::_internal_is_definition() const {
  return is_definition_;
}
inline bool Payload_Template::is_definition() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Template.is_definition)
  return _internal_is_definition();
}
inline void Payload_Template::_internal_set_is_definition(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_definition_ = value;
}
inline void Payload_Template::set_is_definition(bool value) {
  _internal_set_is_definition(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Template.is_definition)
}

// -------------------------------------------------------------------

// Payload_DataSet_DataSetValue_DataSetValueExtension

// -------------------------------------------------------------------

// Payload_DataSet_DataSetValue

// uint32 int_value = 1;
inline bool Payload_DataSet_DataSetValue::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool Payload_DataSet_DataSetValue::has_int_value() const {
  return _internal_has_int_value();
}
inline void Payload_DataSet_DataSetValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void Payload_DataSet_DataSetValue::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = 0u;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_DataSet_DataSetValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return 0u;
}
inline void Payload_DataSet_DataSetValue::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_DataSet_DataSetValue::int_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.int_value)
  return _internal_int_value();
}
inline void Payload_DataSet_DataSetValue::set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.int_value)
}

// uint64 long_value = 2;
inline bool Payload_DataSet_DataSetValue::_internal_has_long_value() const {
  return value_case() == kLongValue;
}
inline bool Payload_DataSet_DataSetValue::has_long_value() const {
  return _internal_has_long_value();
}
inline void Payload_DataSet_DataSetValue::set_has_long_value() {
  _oneof_case_[0] = kLongValue;
}
inline void Payload_DataSet_DataSetValue::clear_long_value() {
  if (_internal_has_long_value()) {
    value_.long_value_ = uint64_t{0u};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_DataSet_DataSetValue::_internal_long_value() const {
  if (_internal_has_long_value()) {
    return value_.long_value_;
  }
  return uint64_t{0u};
}
inline void Payload_DataSet_DataSetValue::_internal_set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_long_value()) {
    clear_value();
    set_has_long_value();
  }
  value_.long_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_DataSet_DataSetValue::long_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.long_value)
  return _internal_long_value();
}
inline void Payload_DataSet_DataSetValue::set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_long_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.long_value)
}

// float float_value = 3;
inline bool Payload_DataSet_DataSetValue::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool Payload_DataSet_DataSetValue::has_float_value() const {
  return _internal_has_float_value();
}
inline void Payload_DataSet_DataSetValue::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Payload_DataSet_DataSetValue::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float Payload_DataSet_DataSetValue::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void Payload_DataSet_DataSetValue::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline float Payload_DataSet_DataSetValue::float_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.float_value)
  return _internal_float_value();
}
inline void Payload_DataSet_DataSetValue::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.float_value)
}

// double double_value = 4;
inline bool Payload_DataSet_DataSetValue::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool Payload_DataSet_DataSetValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void Payload_DataSet_DataSetValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Payload_DataSet_DataSetValue::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double Payload_DataSet_DataSetValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void Payload_DataSet_DataSetValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double Payload_DataSet_DataSetValue::double_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.double_value)
  return _internal_double_value();
}
inline void Payload_DataSet_DataSetValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.double_value)
}

// bool boolean_value = 5;
inline bool Payload_DataSet_DataSetValue::_internal_has_boolean_value() const {
  return value_case() == kBooleanValue;
}
inline bool Payload_DataSet_DataSetValue::has_boolean_value() const {
  return _internal_has_boolean_value();
}
inline void Payload_DataSet_DataSetValue::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void Payload_DataSet_DataSetValue::clear_boolean_value() {
  if (_internal_has_boolean_value()) {
    value_.boolean_value_ = false;
    clear_has_value();
  }
}
inline bool Payload_DataSet_DataSetValue::_internal_boolean_value() const {
  if (_internal_has_boolean_value()) {
    return value_.boolean_value_;
  }
  return false;
}
inline void Payload_DataSet_DataSetValue::_internal_set_boolean_value(bool value) {
  if (!_internal_has_boolean_value()) {
    clear_value();
    set_has_boolean_value();
  }
  value_.boolean_value_ = value;
}
inline bool Payload_DataSet_DataSetValue::boolean_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.boolean_value)
  return _internal_boolean_value();
}
inline void Payload_DataSet_DataSetValue::set_boolean_value(bool value) {
  _internal_set_boolean_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.boolean_value)
}

// string string_value = 6;
inline bool Payload_DataSet_DataSetValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool Payload_DataSet_DataSetValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void Payload_DataSet_DataSetValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Payload_DataSet_DataSetValue::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& Payload_DataSet_DataSetValue::string_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Payload_DataSet_DataSetValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.string_value)
}
inline std::string* Payload_DataSet_DataSetValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.string_value)
  return _s;
}
inline const std::string& Payload_DataSet_DataSetValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Payload_DataSet_DataSetValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_DataSet_DataSetValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_DataSet_DataSetValue::release_string_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Payload_DataSet_DataSetValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.string_value)
}

// .com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension extension_value = 7;
inline bool Payload_DataSet_DataSetValue::_internal_has_extension_value() const {
  return value_case() == kExtensionValue;
}
inline bool Payload_DataSet_DataSetValue::has_extension_value() const {
  return _internal_has_extension_value();
}
inline void Payload_DataSet_DataSetValue::set_has_extension_value() {
  _oneof_case_[0] = kExtensionValue;
}
inline void Payload_DataSet_DataSetValue::clear_extension_value() {
  if (_internal_has_extension_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.extension_value_;
    }
    clear_has_value();
  }
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* Payload_DataSet_DataSetValue::release_extension_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.extension_value)
  if (_internal_has_extension_value()) {
    clear_has_value();
      ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* temp = value_.extension_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.extension_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension& Payload_DataSet_DataSetValue::_internal_extension_value() const {
  return _internal_has_extension_value()
      ? *value_.extension_value_
      : reinterpret_cast< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension&>(::com::cirruslink::sparkplug::protobuf::_Payload_DataSet_DataSetValue_DataSetValueExtension_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension& Payload_DataSet_DataSetValue::extension_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.extension_value)
  return _internal_extension_value();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* Payload_DataSet_DataSetValue::unsafe_arena_release_extension_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.extension_value)
  if (_internal_has_extension_value()) {
    clear_has_value();
    ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* temp = value_.extension_value_;
    value_.extension_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_DataSet_DataSetValue::unsafe_arena_set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* extension_value) {
  clear_value();
  if (extension_value) {
    set_has_extension_value();
    value_.extension_value_ = extension_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.extension_value)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* Payload_DataSet_DataSetValue::_internal_mutable_extension_value() {
  if (!_internal_has_extension_value()) {
    clear_value();
    set_has_extension_value();
    value_.extension_value_ = CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension >(GetArenaForAllocation());
  }
  return value_.extension_value_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* Payload_DataSet_DataSetValue::mutable_extension_value() {
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* _msg = _internal_mutable_extension_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.extension_value)
  return _msg;
}

inline bool Payload_DataSet_DataSetValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Payload_DataSet_DataSetValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Payload_DataSet_DataSetValue::ValueCase Payload_DataSet_DataSetValue::value_case() const {
  return Payload_DataSet_DataSetValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Payload_DataSet_Row

// repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue elements = 1;
inline int Payload_DataSet_Row::_internal_elements_size() const {
  return elements_.size();
}
inline int Payload_DataSet_Row::elements_size() const {
  return _internal_elements_size();
}
inline void Payload_DataSet_Row::clear_elements() {
  elements_.Clear();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue* Payload_DataSet_Row::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue >*
Payload_DataSet_Row::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row.elements)
  return &elements_;
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue& Payload_DataSet_Row::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue& Payload_DataSet_Row::elements(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row.elements)
  return _internal_elements(index);
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue* Payload_DataSet_Row::_internal_add_elements() {
  return elements_.Add();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue* Payload_DataSet_Row::add_elements() {
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue >&
Payload_DataSet_Row::elements() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row.elements)
  return elements_;
}

// -------------------------------------------------------------------

// Payload_DataSet

// optional uint64 num_of_columns = 1;
inline bool Payload_DataSet::_internal_has_num_of_columns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Payload_DataSet::has_num_of_columns() const {
  return _internal_has_num_of_columns();
}
inline void Payload_DataSet::clear_num_of_columns() {
  num_of_columns_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_DataSet::_internal_num_of_columns() const {
  return num_of_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_DataSet::num_of_columns() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.num_of_columns)
  return _internal_num_of_columns();
}
inline void Payload_DataSet::_internal_set_num_of_columns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  num_of_columns_ = value;
}
inline void Payload_DataSet::set_num_of_columns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_of_columns(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.num_of_columns)
}

// repeated string columns = 2;
inline int Payload_DataSet::_internal_columns_size() const {
  return columns_.size();
}
inline int Payload_DataSet::columns_size() const {
  return _internal_columns_size();
}
inline void Payload_DataSet::clear_columns() {
  columns_.Clear();
}
inline std::string* Payload_DataSet::add_columns() {
  std::string* _s = _internal_add_columns();
  // @@protoc_insertion_point(field_add_mutable:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
  return _s;
}
inline const std::string& Payload_DataSet::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const std::string& Payload_DataSet::columns(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
  return _internal_columns(index);
}
inline std::string* Payload_DataSet::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
  return columns_.Mutable(index);
}
inline void Payload_DataSet::set_columns(int index, const std::string& value) {
  columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
}
inline void Payload_DataSet::set_columns(int index, std::string&& value) {
  columns_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
}
inline void Payload_DataSet::set_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
}
inline void Payload_DataSet::set_columns(int index, const char* value, size_t size) {
  columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
}
inline std::string* Payload_DataSet::_internal_add_columns() {
  return columns_.Add();
}
inline void Payload_DataSet::add_columns(const std::string& value) {
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
}
inline void Payload_DataSet::add_columns(std::string&& value) {
  columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
}
inline void Payload_DataSet::add_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
}
inline void Payload_DataSet::add_columns(const char* value, size_t size) {
  columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Payload_DataSet::columns() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
  return columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Payload_DataSet::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns)
  return &columns_;
}

// repeated uint32 types = 3;
inline int Payload_DataSet::_internal_types_size() const {
  return types_.size();
}
inline int Payload_DataSet::types_size() const {
  return _internal_types_size();
}
inline void Payload_DataSet::clear_types() {
  types_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_DataSet::_internal_types(int index) const {
  return types_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_DataSet::types(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.types)
  return _internal_types(index);
}
inline void Payload_DataSet::set_types(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.DataSet.types)
}
inline void Payload_DataSet::_internal_add_types(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  types_.Add(value);
}
inline void Payload_DataSet::add_types(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_types(value);
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.DataSet.types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Payload_DataSet::_internal_types() const {
  return types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Payload_DataSet::types() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.DataSet.types)
  return _internal_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Payload_DataSet::_internal_mutable_types() {
  return &types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Payload_DataSet::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.DataSet.types)
  return _internal_mutable_types();
}

// repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row rows = 4;
inline int Payload_DataSet::_internal_rows_size() const {
  return rows_.size();
}
inline int Payload_DataSet::rows_size() const {
  return _internal_rows_size();
}
inline void Payload_DataSet::clear_rows() {
  rows_.Clear();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row* Payload_DataSet::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.DataSet.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row >*
Payload_DataSet::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.DataSet.rows)
  return &rows_;
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row& Payload_DataSet::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row& Payload_DataSet::rows(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.DataSet.rows)
  return _internal_rows(index);
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row* Payload_DataSet::_internal_add_rows() {
  return rows_.Add();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row* Payload_DataSet::add_rows() {
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.DataSet.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row >&
Payload_DataSet::rows() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.DataSet.rows)
  return rows_;
}

// -------------------------------------------------------------------

// Payload_PropertyValue_PropertyValueExtension

// -------------------------------------------------------------------

// Payload_PropertyValue

// optional uint32 type = 1;
inline bool Payload_PropertyValue::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Payload_PropertyValue::has_type() const {
  return _internal_has_type();
}
inline void Payload_PropertyValue::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_PropertyValue::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_PropertyValue::type() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.type)
  return _internal_type();
}
inline void Payload_PropertyValue::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Payload_PropertyValue::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.type)
}

// optional bool is_null = 2;
inline bool Payload_PropertyValue::_internal_has_is_null() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Payload_PropertyValue::has_is_null() const {
  return _internal_has_is_null();
}
inline void Payload_PropertyValue::clear_is_null() {
  is_null_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Payload_PropertyValue::_internal_is_null() const {
  return is_null_;
}
inline bool Payload_PropertyValue::is_null() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.is_null)
  return _internal_is_null();
}
inline void Payload_PropertyValue::_internal_set_is_null(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_null_ = value;
}
inline void Payload_PropertyValue::set_is_null(bool value) {
  _internal_set_is_null(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.is_null)
}

// uint32 int_value = 3;
inline bool Payload_PropertyValue::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool Payload_PropertyValue::has_int_value() const {
  return _internal_has_int_value();
}
inline void Payload_PropertyValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void Payload_PropertyValue::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = 0u;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_PropertyValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return 0u;
}
inline void Payload_PropertyValue::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_PropertyValue::int_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.int_value)
  return _internal_int_value();
}
inline void Payload_PropertyValue::set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.int_value)
}

// uint64 long_value = 4;
inline bool Payload_PropertyValue::_internal_has_long_value() const {
  return value_case() == kLongValue;
}
inline bool Payload_PropertyValue::has_long_value() const {
  return _internal_has_long_value();
}
inline void Payload_PropertyValue::set_has_long_value() {
  _oneof_case_[0] = kLongValue;
}
inline void Payload_PropertyValue::clear_long_value() {
  if (_internal_has_long_value()) {
    value_.long_value_ = uint64_t{0u};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_PropertyValue::_internal_long_value() const {
  if (_internal_has_long_value()) {
    return value_.long_value_;
  }
  return uint64_t{0u};
}
inline void Payload_PropertyValue::_internal_set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_long_value()) {
    clear_value();
    set_has_long_value();
  }
  value_.long_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_PropertyValue::long_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.long_value)
  return _internal_long_value();
}
inline void Payload_PropertyValue::set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_long_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.long_value)
}

// float float_value = 5;
inline bool Payload_PropertyValue::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool Payload_PropertyValue::has_float_value() const {
  return _internal_has_float_value();
}
inline void Payload_PropertyValue::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Payload_PropertyValue::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float Payload_PropertyValue::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void Payload_PropertyValue::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline float Payload_PropertyValue::float_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.float_value)
  return _internal_float_value();
}
inline void Payload_PropertyValue::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.float_value)
}

// double double_value = 6;
inline bool Payload_PropertyValue::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool Payload_PropertyValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void Payload_PropertyValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Payload_PropertyValue::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double Payload_PropertyValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void Payload_PropertyValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double Payload_PropertyValue::double_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.double_value)
  return _internal_double_value();
}
inline void Payload_PropertyValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.double_value)
}

// bool boolean_value = 7;
inline bool Payload_PropertyValue::_internal_has_boolean_value() const {
  return value_case() == kBooleanValue;
}
inline bool Payload_PropertyValue::has_boolean_value() const {
  return _internal_has_boolean_value();
}
inline void Payload_PropertyValue::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void Payload_PropertyValue::clear_boolean_value() {
  if (_internal_has_boolean_value()) {
    value_.boolean_value_ = false;
    clear_has_value();
  }
}
inline bool Payload_PropertyValue::_internal_boolean_value() const {
  if (_internal_has_boolean_value()) {
    return value_.boolean_value_;
  }
  return false;
}
inline void Payload_PropertyValue::_internal_set_boolean_value(bool value) {
  if (!_internal_has_boolean_value()) {
    clear_value();
    set_has_boolean_value();
  }
  value_.boolean_value_ = value;
}
inline bool Payload_PropertyValue::boolean_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.boolean_value)
  return _internal_boolean_value();
}
inline void Payload_PropertyValue::set_boolean_value(bool value) {
  _internal_set_boolean_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.boolean_value)
}

// string string_value = 8;
inline bool Payload_PropertyValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool Payload_PropertyValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void Payload_PropertyValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Payload_PropertyValue::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& Payload_PropertyValue::string_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Payload_PropertyValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.string_value)
}
inline std::string* Payload_PropertyValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.string_value)
  return _s;
}
inline const std::string& Payload_PropertyValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Payload_PropertyValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_PropertyValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_PropertyValue::release_string_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Payload_PropertyValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.string_value)
}

// .com.cirruslink.sparkplug.protobuf.Payload.PropertySet propertyset_value = 9;
inline bool Payload_PropertyValue::_internal_has_propertyset_value() const {
  return value_case() == kPropertysetValue;
}
inline bool Payload_PropertyValue::has_propertyset_value() const {
  return _internal_has_propertyset_value();
}
inline void Payload_PropertyValue::set_has_propertyset_value() {
  _oneof_case_[0] = kPropertysetValue;
}
inline void Payload_PropertyValue::clear_propertyset_value() {
  if (_internal_has_propertyset_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.propertyset_value_;
    }
    clear_has_value();
  }
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_PropertyValue::release_propertyset_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertyset_value)
  if (_internal_has_propertyset_value()) {
    clear_has_value();
      ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* temp = value_.propertyset_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.propertyset_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& Payload_PropertyValue::_internal_propertyset_value() const {
  return _internal_has_propertyset_value()
      ? *value_.propertyset_value_
      : reinterpret_cast< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet&>(::com::cirruslink::sparkplug::protobuf::_Payload_PropertySet_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& Payload_PropertyValue::propertyset_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertyset_value)
  return _internal_propertyset_value();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_PropertyValue::unsafe_arena_release_propertyset_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertyset_value)
  if (_internal_has_propertyset_value()) {
    clear_has_value();
    ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* temp = value_.propertyset_value_;
    value_.propertyset_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_PropertyValue::unsafe_arena_set_allocated_propertyset_value(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* propertyset_value) {
  clear_value();
  if (propertyset_value) {
    set_has_propertyset_value();
    value_.propertyset_value_ = propertyset_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertyset_value)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_PropertyValue::_internal_mutable_propertyset_value() {
  if (!_internal_has_propertyset_value()) {
    clear_value();
    set_has_propertyset_value();
    value_.propertyset_value_ = CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet >(GetArenaForAllocation());
  }
  return value_.propertyset_value_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_PropertyValue::mutable_propertyset_value() {
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* _msg = _internal_mutable_propertyset_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertyset_value)
  return _msg;
}

// .com.cirruslink.sparkplug.protobuf.Payload.PropertySetList propertysets_value = 10;
inline bool Payload_PropertyValue::_internal_has_propertysets_value() const {
  return value_case() == kPropertysetsValue;
}
inline bool Payload_PropertyValue::has_propertysets_value() const {
  return _internal_has_propertysets_value();
}
inline void Payload_PropertyValue::set_has_propertysets_value() {
  _oneof_case_[0] = kPropertysetsValue;
}
inline void Payload_PropertyValue::clear_propertysets_value() {
  if (_internal_has_propertysets_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.propertysets_value_;
    }
    clear_has_value();
  }
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* Payload_PropertyValue::release_propertysets_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertysets_value)
  if (_internal_has_propertysets_value()) {
    clear_has_value();
      ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* temp = value_.propertysets_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.propertysets_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList& Payload_PropertyValue::_internal_propertysets_value() const {
  return _internal_has_propertysets_value()
      ? *value_.propertysets_value_
      : reinterpret_cast< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList&>(::com::cirruslink::sparkplug::protobuf::_Payload_PropertySetList_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList& Payload_PropertyValue::propertysets_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertysets_value)
  return _internal_propertysets_value();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* Payload_PropertyValue::unsafe_arena_release_propertysets_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertysets_value)
  if (_internal_has_propertysets_value()) {
    clear_has_value();
    ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* temp = value_.propertysets_value_;
    value_.propertysets_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_PropertyValue::unsafe_arena_set_allocated_propertysets_value(::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* propertysets_value) {
  clear_value();
  if (propertysets_value) {
    set_has_propertysets_value();
    value_.propertysets_value_ = propertysets_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertysets_value)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* Payload_PropertyValue::_internal_mutable_propertysets_value() {
  if (!_internal_has_propertysets_value()) {
    clear_value();
    set_has_propertysets_value();
    value_.propertysets_value_ = CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList >(GetArenaForAllocation());
  }
  return value_.propertysets_value_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* Payload_PropertyValue::mutable_propertysets_value() {
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* _msg = _internal_mutable_propertysets_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertysets_value)
  return _msg;
}

// .com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension extension_value = 11;
inline bool Payload_PropertyValue::_internal_has_extension_value() const {
  return value_case() == kExtensionValue;
}
inline bool Payload_PropertyValue::has_extension_value() const {
  return _internal_has_extension_value();
}
inline void Payload_PropertyValue::set_has_extension_value() {
  _oneof_case_[0] = kExtensionValue;
}
inline void Payload_PropertyValue::clear_extension_value() {
  if (_internal_has_extension_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.extension_value_;
    }
    clear_has_value();
  }
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* Payload_PropertyValue::release_extension_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.extension_value)
  if (_internal_has_extension_value()) {
    clear_has_value();
      ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* temp = value_.extension_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.extension_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension& Payload_PropertyValue::_internal_extension_value() const {
  return _internal_has_extension_value()
      ? *value_.extension_value_
      : reinterpret_cast< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension&>(::com::cirruslink::sparkplug::protobuf::_Payload_PropertyValue_PropertyValueExtension_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension& Payload_PropertyValue::extension_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.extension_value)
  return _internal_extension_value();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* Payload_PropertyValue::unsafe_arena_release_extension_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.extension_value)
  if (_internal_has_extension_value()) {
    clear_has_value();
    ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* temp = value_.extension_value_;
    value_.extension_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_PropertyValue::unsafe_arena_set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* extension_value) {
  clear_value();
  if (extension_value) {
    set_has_extension_value();
    value_.extension_value_ = extension_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.extension_value)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* Payload_PropertyValue::_internal_mutable_extension_value() {
  if (!_internal_has_extension_value()) {
    clear_value();
    set_has_extension_value();
    value_.extension_value_ = CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension >(GetArenaForAllocation());
  }
  return value_.extension_value_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* Payload_PropertyValue::mutable_extension_value() {
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* _msg = _internal_mutable_extension_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.extension_value)
  return _msg;
}

inline bool Payload_PropertyValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Payload_PropertyValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Payload_PropertyValue::ValueCase Payload_PropertyValue::value_case() const {
  return Payload_PropertyValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Payload_PropertySet

// repeated string keys = 1;
inline int Payload_PropertySet::_internal_keys_size() const {
  return keys_.size();
}
inline int Payload_PropertySet::keys_size() const {
  return _internal_keys_size();
}
inline void Payload_PropertySet::clear_keys() {
  keys_.Clear();
}
inline std::string* Payload_PropertySet::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
  return _s;
}
inline const std::string& Payload_PropertySet::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& Payload_PropertySet::keys(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
  return _internal_keys(index);
}
inline std::string* Payload_PropertySet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
  return keys_.Mutable(index);
}
inline void Payload_PropertySet::set_keys(int index, const std::string& value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
}
inline void Payload_PropertySet::set_keys(int index, std::string&& value) {
  keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
}
inline void Payload_PropertySet::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
}
inline void Payload_PropertySet::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
}
inline std::string* Payload_PropertySet::_internal_add_keys() {
  return keys_.Add();
}
inline void Payload_PropertySet::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
}
inline void Payload_PropertySet::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
}
inline void Payload_PropertySet::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
}
inline void Payload_PropertySet::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Payload_PropertySet::keys() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Payload_PropertySet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys)
  return &keys_;
}

// repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertyValue values = 2;
inline int Payload_PropertySet::_internal_values_size() const {
  return values_.size();
}
inline int Payload_PropertySet::values_size() const {
  return _internal_values_size();
}
inline void Payload_PropertySet::clear_values() {
  values_.Clear();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue* Payload_PropertySet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue >*
Payload_PropertySet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.values)
  return &values_;
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue& Payload_PropertySet::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue& Payload_PropertySet::values(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.values)
  return _internal_values(index);
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue* Payload_PropertySet::_internal_add_values() {
  return values_.Add();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue* Payload_PropertySet::add_values() {
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue >&
Payload_PropertySet::values() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.PropertySet.values)
  return values_;
}

// -------------------------------------------------------------------

// Payload_PropertySetList

// repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertySet propertyset = 1;
inline int Payload_PropertySetList::_internal_propertyset_size() const {
  return propertyset_.size();
}
inline int Payload_PropertySetList::propertyset_size() const {
  return _internal_propertyset_size();
}
inline void Payload_PropertySetList::clear_propertyset() {
  propertyset_.Clear();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_PropertySetList::mutable_propertyset(int index) {
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList.propertyset)
  return propertyset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet >*
Payload_PropertySetList::mutable_propertyset() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList.propertyset)
  return &propertyset_;
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& Payload_PropertySetList::_internal_propertyset(int index) const {
  return propertyset_.Get(index);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& Payload_PropertySetList::propertyset(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList.propertyset)
  return _internal_propertyset(index);
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_PropertySetList::_internal_add_propertyset() {
  return propertyset_.Add();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_PropertySetList::add_propertyset() {
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* _add = _internal_add_propertyset();
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList.propertyset)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet >&
Payload_PropertySetList::propertyset() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList.propertyset)
  return propertyset_;
}

// -------------------------------------------------------------------

// Payload_MetaData

// optional bool is_multi_part = 1;
inline bool Payload_MetaData::_internal_has_is_multi_part() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Payload_MetaData::has_is_multi_part() const {
  return _internal_has_is_multi_part();
}
inline void Payload_MetaData::clear_is_multi_part() {
  is_multi_part_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Payload_MetaData::_internal_is_multi_part() const {
  return is_multi_part_;
}
inline bool Payload_MetaData::is_multi_part() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.MetaData.is_multi_part)
  return _internal_is_multi_part();
}
inline void Payload_MetaData::_internal_set_is_multi_part(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_multi_part_ = value;
}
inline void Payload_MetaData::set_is_multi_part(bool value) {
  _internal_set_is_multi_part(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.MetaData.is_multi_part)
}

// optional string content_type = 2;
inline bool Payload_MetaData::_internal_has_content_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Payload_MetaData::has_content_type() const {
  return _internal_has_content_type();
}
inline void Payload_MetaData::clear_content_type() {
  content_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Payload_MetaData::content_type() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.MetaData.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload_MetaData::set_content_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.MetaData.content_type)
}
inline std::string* Payload_MetaData::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.MetaData.content_type)
  return _s;
}
inline const std::string& Payload_MetaData::_internal_content_type() const {
  return content_type_.Get();
}
inline void Payload_MetaData::_internal_set_content_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::_internal_mutable_content_type() {
  _has_bits_[0] |= 0x00000001u;
  return content_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::release_content_type() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.MetaData.content_type)
  if (!_internal_has_content_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload_MetaData::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.MetaData.content_type)
}

// optional uint64 size = 3;
inline bool Payload_MetaData::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Payload_MetaData::has_size() const {
  return _internal_has_size();
}
inline void Payload_MetaData::clear_size() {
  size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_MetaData::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_MetaData::size() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.MetaData.size)
  return _internal_size();
}
inline void Payload_MetaData::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  size_ = value;
}
inline void Payload_MetaData::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.MetaData.size)
}

// optional uint64 seq = 4;
inline bool Payload_MetaData::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Payload_MetaData::has_seq() const {
  return _internal_has_seq();
}
inline void Payload_MetaData::clear_seq() {
  seq_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_MetaData::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_MetaData::seq() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.MetaData.seq)
  return _internal_seq();
}
inline void Payload_MetaData::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  seq_ = value;
}
inline void Payload_MetaData::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.MetaData.seq)
}

// optional string file_name = 5;
inline bool Payload_MetaData::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Payload_MetaData::has_file_name() const {
  return _internal_has_file_name();
}
inline void Payload_MetaData::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Payload_MetaData::file_name() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload_MetaData::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_name)
}
inline std::string* Payload_MetaData::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_name)
  return _s;
}
inline const std::string& Payload_MetaData::_internal_file_name() const {
  return file_name_.Get();
}
inline void Payload_MetaData::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000002u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::release_file_name() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload_MetaData::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_name)
}

// optional string file_type = 6;
inline bool Payload_MetaData::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Payload_MetaData::has_file_type() const {
  return _internal_has_file_type();
}
inline void Payload_MetaData::clear_file_type() {
  file_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Payload_MetaData::file_type() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_type)
  return _internal_file_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload_MetaData::set_file_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_type)
}
inline std::string* Payload_MetaData::mutable_file_type() {
  std::string* _s = _internal_mutable_file_type();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_type)
  return _s;
}
inline const std::string& Payload_MetaData::_internal_file_type() const {
  return file_type_.Get();
}
inline void Payload_MetaData::_internal_set_file_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::_internal_mutable_file_type() {
  _has_bits_[0] |= 0x00000004u;
  return file_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::release_file_type() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_type)
  if (!_internal_has_file_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return file_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload_MetaData::set_allocated_file_type(std::string* file_type) {
  if (file_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  file_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_type)
}

// optional string md5 = 7;
inline bool Payload_MetaData::_internal_has_md5() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Payload_MetaData::has_md5() const {
  return _internal_has_md5();
}
inline void Payload_MetaData::clear_md5() {
  md5_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Payload_MetaData::md5() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.MetaData.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload_MetaData::set_md5(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.MetaData.md5)
}
inline std::string* Payload_MetaData::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.MetaData.md5)
  return _s;
}
inline const std::string& Payload_MetaData::_internal_md5() const {
  return md5_.Get();
}
inline void Payload_MetaData::_internal_set_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::_internal_mutable_md5() {
  _has_bits_[0] |= 0x00000008u;
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::release_md5() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.MetaData.md5)
  if (!_internal_has_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return md5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload_MetaData::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.MetaData.md5)
}

// optional string description = 8;
inline bool Payload_MetaData::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Payload_MetaData::has_description() const {
  return _internal_has_description();
}
inline void Payload_MetaData::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Payload_MetaData::description() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.MetaData.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload_MetaData::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.MetaData.description)
}
inline std::string* Payload_MetaData::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.MetaData.description)
  return _s;
}
inline const std::string& Payload_MetaData::_internal_description() const {
  return description_.Get();
}
inline void Payload_MetaData::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000010u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_MetaData::release_description() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.MetaData.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload_MetaData::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.MetaData.description)
}

// -------------------------------------------------------------------

// Payload_Metric_MetricValueExtension

// -------------------------------------------------------------------

// Payload_Metric

// optional string name = 1;
inline bool Payload_Metric::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Payload_Metric::has_name() const {
  return _internal_has_name();
}
inline void Payload_Metric::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Payload_Metric::name() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload_Metric::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.name)
}
inline std::string* Payload_Metric::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Metric.name)
  return _s;
}
inline const std::string& Payload_Metric::_internal_name() const {
  return name_.Get();
}
inline void Payload_Metric::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_Metric::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_Metric::release_name() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload_Metric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.name)
}

// optional uint64 alias = 2;
inline bool Payload_Metric::_internal_has_alias() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Payload_Metric::has_alias() const {
  return _internal_has_alias();
}
inline void Payload_Metric::clear_alias() {
  alias_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_Metric::_internal_alias() const {
  return alias_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_Metric::alias() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.alias)
  return _internal_alias();
}
inline void Payload_Metric::_internal_set_alias(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  alias_ = value;
}
inline void Payload_Metric::set_alias(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.alias)
}

// optional uint64 timestamp = 3;
inline bool Payload_Metric::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Payload_Metric::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Payload_Metric::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_Metric::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_Metric::timestamp() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.timestamp)
  return _internal_timestamp();
}
inline void Payload_Metric::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void Payload_Metric::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.timestamp)
}

// optional uint32 datatype = 4;
inline bool Payload_Metric::_internal_has_datatype() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Payload_Metric::has_datatype() const {
  return _internal_has_datatype();
}
inline void Payload_Metric::clear_datatype() {
  datatype_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_Metric::_internal_datatype() const {
  return datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_Metric::datatype() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.datatype)
  return _internal_datatype();
}
inline void Payload_Metric::_internal_set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  datatype_ = value;
}
inline void Payload_Metric::set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.datatype)
}

// optional bool is_historical = 5;
inline bool Payload_Metric::_internal_has_is_historical() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Payload_Metric::has_is_historical() const {
  return _internal_has_is_historical();
}
inline void Payload_Metric::clear_is_historical() {
  is_historical_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Payload_Metric::_internal_is_historical() const {
  return is_historical_;
}
inline bool Payload_Metric::is_historical() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.is_historical)
  return _internal_is_historical();
}
inline void Payload_Metric::_internal_set_is_historical(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_historical_ = value;
}
inline void Payload_Metric::set_is_historical(bool value) {
  _internal_set_is_historical(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.is_historical)
}

// optional bool is_transient = 6;
inline bool Payload_Metric::_internal_has_is_transient() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Payload_Metric::has_is_transient() const {
  return _internal_has_is_transient();
}
inline void Payload_Metric::clear_is_transient() {
  is_transient_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Payload_Metric::_internal_is_transient() const {
  return is_transient_;
}
inline bool Payload_Metric::is_transient() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.is_transient)
  return _internal_is_transient();
}
inline void Payload_Metric::_internal_set_is_transient(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_transient_ = value;
}
inline void Payload_Metric::set_is_transient(bool value) {
  _internal_set_is_transient(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.is_transient)
}

// optional bool is_null = 7;
inline bool Payload_Metric::_internal_has_is_null() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Payload_Metric::has_is_null() const {
  return _internal_has_is_null();
}
inline void Payload_Metric::clear_is_null() {
  is_null_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Payload_Metric::_internal_is_null() const {
  return is_null_;
}
inline bool Payload_Metric::is_null() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.is_null)
  return _internal_is_null();
}
inline void Payload_Metric::_internal_set_is_null(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_null_ = value;
}
inline void Payload_Metric::set_is_null(bool value) {
  _internal_set_is_null(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.is_null)
}

// optional .com.cirruslink.sparkplug.protobuf.Payload.MetaData metadata = 8;
inline bool Payload_Metric::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool Payload_Metric::has_metadata() const {
  return _internal_has_metadata();
}
inline void Payload_Metric::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_MetaData& Payload_Metric::_internal_metadata() const {
  const ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::cirruslink::sparkplug::protobuf::Payload_MetaData&>(
      ::com::cirruslink::sparkplug::protobuf::_Payload_MetaData_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_MetaData& Payload_Metric::metadata() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.metadata)
  return _internal_metadata();
}
inline void Payload_Metric::unsafe_arena_set_allocated_metadata(
    ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.metadata)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* Payload_Metric::release_metadata() {
  _has_bits_[0] &= ~0x00000002u;
  ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* Payload_Metric::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* Payload_Metric::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_MetaData>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* Payload_Metric::mutable_metadata() {
  ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Metric.metadata)
  return _msg;
}
inline void Payload_Metric::set_allocated_metadata(::com::cirruslink::sparkplug::protobuf::Payload_MetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_MetaData>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.metadata)
}

// optional .com.cirruslink.sparkplug.protobuf.Payload.PropertySet properties = 9;
inline bool Payload_Metric::_internal_has_properties() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || properties_ != nullptr);
  return value;
}
inline bool Payload_Metric::has_properties() const {
  return _internal_has_properties();
}
inline void Payload_Metric::clear_properties() {
  if (properties_ != nullptr) properties_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& Payload_Metric::_internal_properties() const {
  const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet&>(
      ::com::cirruslink::sparkplug::protobuf::_Payload_PropertySet_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& Payload_Metric::properties() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.properties)
  return _internal_properties();
}
inline void Payload_Metric::unsafe_arena_set_allocated_properties(
    ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.properties)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_Metric::release_properties() {
  _has_bits_[0] &= ~0x00000004u;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* temp = properties_;
  properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_Metric::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.properties)
  _has_bits_[0] &= ~0x00000004u;
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_Metric::_internal_mutable_properties() {
  _has_bits_[0] |= 0x00000004u;
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::cirruslink::sparkplug::protobuf::Payload_PropertySet>(GetArenaForAllocation());
    properties_ = p;
  }
  return properties_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Payload_Metric::mutable_properties() {
  ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* _msg = _internal_mutable_properties();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Metric.properties)
  return _msg;
}
inline void Payload_Metric::set_allocated_properties(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete properties_;
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_PropertySet>::GetOwningArena(properties);
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.properties)
}

// uint32 int_value = 10;
inline bool Payload_Metric::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool Payload_Metric::has_int_value() const {
  return _internal_has_int_value();
}
inline void Payload_Metric::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void Payload_Metric::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = 0u;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_Metric::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return 0u;
}
inline void Payload_Metric::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payload_Metric::int_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.int_value)
  return _internal_int_value();
}
inline void Payload_Metric::set_int_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.int_value)
}

// uint64 long_value = 11;
inline bool Payload_Metric::_internal_has_long_value() const {
  return value_case() == kLongValue;
}
inline bool Payload_Metric::has_long_value() const {
  return _internal_has_long_value();
}
inline void Payload_Metric::set_has_long_value() {
  _oneof_case_[0] = kLongValue;
}
inline void Payload_Metric::clear_long_value() {
  if (_internal_has_long_value()) {
    value_.long_value_ = uint64_t{0u};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_Metric::_internal_long_value() const {
  if (_internal_has_long_value()) {
    return value_.long_value_;
  }
  return uint64_t{0u};
}
inline void Payload_Metric::_internal_set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_long_value()) {
    clear_value();
    set_has_long_value();
  }
  value_.long_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload_Metric::long_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.long_value)
  return _internal_long_value();
}
inline void Payload_Metric::set_long_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_long_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.long_value)
}

// float float_value = 12;
inline bool Payload_Metric::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool Payload_Metric::has_float_value() const {
  return _internal_has_float_value();
}
inline void Payload_Metric::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Payload_Metric::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float Payload_Metric::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void Payload_Metric::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline float Payload_Metric::float_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.float_value)
  return _internal_float_value();
}
inline void Payload_Metric::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.float_value)
}

// double double_value = 13;
inline bool Payload_Metric::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool Payload_Metric::has_double_value() const {
  return _internal_has_double_value();
}
inline void Payload_Metric::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Payload_Metric::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double Payload_Metric::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void Payload_Metric::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double Payload_Metric::double_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.double_value)
  return _internal_double_value();
}
inline void Payload_Metric::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.double_value)
}

// bool boolean_value = 14;
inline bool Payload_Metric::_internal_has_boolean_value() const {
  return value_case() == kBooleanValue;
}
inline bool Payload_Metric::has_boolean_value() const {
  return _internal_has_boolean_value();
}
inline void Payload_Metric::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void Payload_Metric::clear_boolean_value() {
  if (_internal_has_boolean_value()) {
    value_.boolean_value_ = false;
    clear_has_value();
  }
}
inline bool Payload_Metric::_internal_boolean_value() const {
  if (_internal_has_boolean_value()) {
    return value_.boolean_value_;
  }
  return false;
}
inline void Payload_Metric::_internal_set_boolean_value(bool value) {
  if (!_internal_has_boolean_value()) {
    clear_value();
    set_has_boolean_value();
  }
  value_.boolean_value_ = value;
}
inline bool Payload_Metric::boolean_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.boolean_value)
  return _internal_boolean_value();
}
inline void Payload_Metric::set_boolean_value(bool value) {
  _internal_set_boolean_value(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.boolean_value)
}

// string string_value = 15;
inline bool Payload_Metric::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool Payload_Metric::has_string_value() const {
  return _internal_has_string_value();
}
inline void Payload_Metric::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Payload_Metric::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& Payload_Metric::string_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Payload_Metric::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.string_value)
}
inline std::string* Payload_Metric::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Metric.string_value)
  return _s;
}
inline const std::string& Payload_Metric::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Payload_Metric::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_Metric::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_Metric::release_string_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Payload_Metric::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.string_value)
}

// bytes bytes_value = 16;
inline bool Payload_Metric::_internal_has_bytes_value() const {
  return value_case() == kBytesValue;
}
inline bool Payload_Metric::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void Payload_Metric::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void Payload_Metric::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    value_.bytes_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& Payload_Metric::bytes_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void Payload_Metric::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.Metric.bytes_value)
}
inline std::string* Payload_Metric::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Metric.bytes_value)
  return _s;
}
inline const std::string& Payload_Metric::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return value_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Payload_Metric::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload_Metric::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.bytes_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload_Metric::release_bytes_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_value();
    return value_.bytes_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Payload_Metric::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_value()) {
    clear_value();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(bytes_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(bytes_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.bytes_value)
}

// .com.cirruslink.sparkplug.protobuf.Payload.DataSet dataset_value = 17;
inline bool Payload_Metric::_internal_has_dataset_value() const {
  return value_case() == kDatasetValue;
}
inline bool Payload_Metric::has_dataset_value() const {
  return _internal_has_dataset_value();
}
inline void Payload_Metric::set_has_dataset_value() {
  _oneof_case_[0] = kDatasetValue;
}
inline void Payload_Metric::clear_dataset_value() {
  if (_internal_has_dataset_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.dataset_value_;
    }
    clear_has_value();
  }
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* Payload_Metric::release_dataset_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.dataset_value)
  if (_internal_has_dataset_value()) {
    clear_has_value();
      ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* temp = value_.dataset_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.dataset_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet& Payload_Metric::_internal_dataset_value() const {
  return _internal_has_dataset_value()
      ? *value_.dataset_value_
      : reinterpret_cast< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet&>(::com::cirruslink::sparkplug::protobuf::_Payload_DataSet_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet& Payload_Metric::dataset_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.dataset_value)
  return _internal_dataset_value();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* Payload_Metric::unsafe_arena_release_dataset_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.dataset_value)
  if (_internal_has_dataset_value()) {
    clear_has_value();
    ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* temp = value_.dataset_value_;
    value_.dataset_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_Metric::unsafe_arena_set_allocated_dataset_value(::com::cirruslink::sparkplug::protobuf::Payload_DataSet* dataset_value) {
  clear_value();
  if (dataset_value) {
    set_has_dataset_value();
    value_.dataset_value_ = dataset_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.dataset_value)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* Payload_Metric::_internal_mutable_dataset_value() {
  if (!_internal_has_dataset_value()) {
    clear_value();
    set_has_dataset_value();
    value_.dataset_value_ = CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet >(GetArenaForAllocation());
  }
  return value_.dataset_value_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* Payload_Metric::mutable_dataset_value() {
  ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* _msg = _internal_mutable_dataset_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Metric.dataset_value)
  return _msg;
}

// .com.cirruslink.sparkplug.protobuf.Payload.Template template_value = 18;
inline bool Payload_Metric::_internal_has_template_value() const {
  return value_case() == kTemplateValue;
}
inline bool Payload_Metric::has_template_value() const {
  return _internal_has_template_value();
}
inline void Payload_Metric::set_has_template_value() {
  _oneof_case_[0] = kTemplateValue;
}
inline void Payload_Metric::clear_template_value() {
  if (_internal_has_template_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.template_value_;
    }
    clear_has_value();
  }
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template* Payload_Metric::release_template_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.template_value)
  if (_internal_has_template_value()) {
    clear_has_value();
      ::com::cirruslink::sparkplug::protobuf::Payload_Template* temp = value_.template_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.template_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Template& Payload_Metric::_internal_template_value() const {
  return _internal_has_template_value()
      ? *value_.template_value_
      : reinterpret_cast< ::com::cirruslink::sparkplug::protobuf::Payload_Template&>(::com::cirruslink::sparkplug::protobuf::_Payload_Template_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Template& Payload_Metric::template_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.template_value)
  return _internal_template_value();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template* Payload_Metric::unsafe_arena_release_template_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.template_value)
  if (_internal_has_template_value()) {
    clear_has_value();
    ::com::cirruslink::sparkplug::protobuf::Payload_Template* temp = value_.template_value_;
    value_.template_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_Metric::unsafe_arena_set_allocated_template_value(::com::cirruslink::sparkplug::protobuf::Payload_Template* template_value) {
  clear_value();
  if (template_value) {
    set_has_template_value();
    value_.template_value_ = template_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.template_value)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template* Payload_Metric::_internal_mutable_template_value() {
  if (!_internal_has_template_value()) {
    clear_value();
    set_has_template_value();
    value_.template_value_ = CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_Template >(GetArenaForAllocation());
  }
  return value_.template_value_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Template* Payload_Metric::mutable_template_value() {
  ::com::cirruslink::sparkplug::protobuf::Payload_Template* _msg = _internal_mutable_template_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Metric.template_value)
  return _msg;
}

// .com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension extension_value = 19;
inline bool Payload_Metric::_internal_has_extension_value() const {
  return value_case() == kExtensionValue;
}
inline bool Payload_Metric::has_extension_value() const {
  return _internal_has_extension_value();
}
inline void Payload_Metric::set_has_extension_value() {
  _oneof_case_[0] = kExtensionValue;
}
inline void Payload_Metric::clear_extension_value() {
  if (_internal_has_extension_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.extension_value_;
    }
    clear_has_value();
  }
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* Payload_Metric::release_extension_value() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.extension_value)
  if (_internal_has_extension_value()) {
    clear_has_value();
      ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* temp = value_.extension_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.extension_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension& Payload_Metric::_internal_extension_value() const {
  return _internal_has_extension_value()
      ? *value_.extension_value_
      : reinterpret_cast< ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension&>(::com::cirruslink::sparkplug::protobuf::_Payload_Metric_MetricValueExtension_default_instance_);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension& Payload_Metric::extension_value() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.Metric.extension_value)
  return _internal_extension_value();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* Payload_Metric::unsafe_arena_release_extension_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.cirruslink.sparkplug.protobuf.Payload.Metric.extension_value)
  if (_internal_has_extension_value()) {
    clear_has_value();
    ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* temp = value_.extension_value_;
    value_.extension_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_Metric::unsafe_arena_set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* extension_value) {
  clear_value();
  if (extension_value) {
    set_has_extension_value();
    value_.extension_value_ = extension_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.extension_value)
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* Payload_Metric::_internal_mutable_extension_value() {
  if (!_internal_has_extension_value()) {
    clear_value();
    set_has_extension_value();
    value_.extension_value_ = CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension >(GetArenaForAllocation());
  }
  return value_.extension_value_;
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* Payload_Metric::mutable_extension_value() {
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* _msg = _internal_mutable_extension_value();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.Metric.extension_value)
  return _msg;
}

inline bool Payload_Metric::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Payload_Metric::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Payload_Metric::ValueCase Payload_Metric::value_case() const {
  return Payload_Metric::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Payload

// optional uint64 timestamp = 1;
inline bool Payload::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Payload::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Payload::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload::timestamp() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.timestamp)
  return _internal_timestamp();
}
inline void Payload::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void Payload::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.timestamp)
}

// repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
inline int Payload::_internal_metrics_size() const {
  return metrics_.size();
}
inline int Payload::metrics_size() const {
  return _internal_metrics_size();
}
inline void Payload::clear_metrics() {
  metrics_.Clear();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric* Payload::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >*
Payload::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:com.cirruslink.sparkplug.protobuf.Payload.metrics)
  return &metrics_;
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Metric& Payload::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::com::cirruslink::sparkplug::protobuf::Payload_Metric& Payload::metrics(int index) const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.metrics)
  return _internal_metrics(index);
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric* Payload::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::com::cirruslink::sparkplug::protobuf::Payload_Metric* Payload::add_metrics() {
  ::com::cirruslink::sparkplug::protobuf::Payload_Metric* _add = _internal_add_metrics();
  // @@protoc_insertion_point(field_add:com.cirruslink.sparkplug.protobuf.Payload.metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >&
Payload::metrics() const {
  // @@protoc_insertion_point(field_list:com.cirruslink.sparkplug.protobuf.Payload.metrics)
  return metrics_;
}

// optional uint64 seq = 3;
inline bool Payload::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Payload::has_seq() const {
  return _internal_has_seq();
}
inline void Payload::clear_seq() {
  seq_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payload::seq() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.seq)
  return _internal_seq();
}
inline void Payload::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  seq_ = value;
}
inline void Payload::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.seq)
}

// optional string uuid = 4;
inline bool Payload::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Payload::has_uuid() const {
  return _internal_has_uuid();
}
inline void Payload::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Payload::uuid() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_uuid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.uuid)
}
inline std::string* Payload::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.uuid)
  return _s;
}
inline const std::string& Payload::_internal_uuid() const {
  return uuid_.Get();
}
inline void Payload::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload::release_uuid() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.uuid)
}

// optional bytes body = 5;
inline bool Payload::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Payload::has_body() const {
  return _internal_has_body();
}
inline void Payload::clear_body() {
  body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Payload::body() const {
  // @@protoc_insertion_point(field_get:com.cirruslink.sparkplug.protobuf.Payload.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_body(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 body_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.cirruslink.sparkplug.protobuf.Payload.body)
}
inline std::string* Payload::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:com.cirruslink.sparkplug.protobuf.Payload.body)
  return _s;
}
inline const std::string& Payload::_internal_body() const {
  return body_.Get();
}
inline void Payload::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000002u;
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload::release_body() {
  // @@protoc_insertion_point(field_release:com.cirruslink.sparkplug.protobuf.Payload.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace sparkplug
}  // namespace cirruslink
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sparkplug_5fb_2eproto
