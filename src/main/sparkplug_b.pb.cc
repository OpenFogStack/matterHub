// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sparkplug_b.proto

#include "sparkplug_b.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace com {
namespace cirruslink {
namespace sparkplug {
namespace protobuf {
constexpr Payload_Template_Parameter_ParameterValueExtension::Payload_Template_Parameter_ParameterValueExtension(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Payload_Template_Parameter_ParameterValueExtensionDefaultTypeInternal {
  constexpr Payload_Template_Parameter_ParameterValueExtensionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_Template_Parameter_ParameterValueExtensionDefaultTypeInternal() {}
  union {
    Payload_Template_Parameter_ParameterValueExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_Template_Parameter_ParameterValueExtensionDefaultTypeInternal _Payload_Template_Parameter_ParameterValueExtension_default_instance_;
constexpr Payload_Template_Parameter::Payload_Template_Parameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0u)
  , _oneof_case_{}{}
struct Payload_Template_ParameterDefaultTypeInternal {
  constexpr Payload_Template_ParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_Template_ParameterDefaultTypeInternal() {}
  union {
    Payload_Template_Parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_Template_ParameterDefaultTypeInternal _Payload_Template_Parameter_default_instance_;
constexpr Payload_Template::Payload_Template(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrics_()
  , parameters_()
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , template_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_definition_(false){}
struct Payload_TemplateDefaultTypeInternal {
  constexpr Payload_TemplateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_TemplateDefaultTypeInternal() {}
  union {
    Payload_Template _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_TemplateDefaultTypeInternal _Payload_Template_default_instance_;
constexpr Payload_DataSet_DataSetValue_DataSetValueExtension::Payload_DataSet_DataSetValue_DataSetValueExtension(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Payload_DataSet_DataSetValue_DataSetValueExtensionDefaultTypeInternal {
  constexpr Payload_DataSet_DataSetValue_DataSetValueExtensionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_DataSet_DataSetValue_DataSetValueExtensionDefaultTypeInternal() {}
  union {
    Payload_DataSet_DataSetValue_DataSetValueExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_DataSet_DataSetValue_DataSetValueExtensionDefaultTypeInternal _Payload_DataSet_DataSetValue_DataSetValueExtension_default_instance_;
constexpr Payload_DataSet_DataSetValue::Payload_DataSet_DataSetValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct Payload_DataSet_DataSetValueDefaultTypeInternal {
  constexpr Payload_DataSet_DataSetValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_DataSet_DataSetValueDefaultTypeInternal() {}
  union {
    Payload_DataSet_DataSetValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_DataSet_DataSetValueDefaultTypeInternal _Payload_DataSet_DataSetValue_default_instance_;
constexpr Payload_DataSet_Row::Payload_DataSet_Row(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_(){}
struct Payload_DataSet_RowDefaultTypeInternal {
  constexpr Payload_DataSet_RowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_DataSet_RowDefaultTypeInternal() {}
  union {
    Payload_DataSet_Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_DataSet_RowDefaultTypeInternal _Payload_DataSet_Row_default_instance_;
constexpr Payload_DataSet::Payload_DataSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_()
  , types_()
  , rows_()
  , num_of_columns_(uint64_t{0u}){}
struct Payload_DataSetDefaultTypeInternal {
  constexpr Payload_DataSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_DataSetDefaultTypeInternal() {}
  union {
    Payload_DataSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_DataSetDefaultTypeInternal _Payload_DataSet_default_instance_;
constexpr Payload_PropertyValue_PropertyValueExtension::Payload_PropertyValue_PropertyValueExtension(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Payload_PropertyValue_PropertyValueExtensionDefaultTypeInternal {
  constexpr Payload_PropertyValue_PropertyValueExtensionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_PropertyValue_PropertyValueExtensionDefaultTypeInternal() {}
  union {
    Payload_PropertyValue_PropertyValueExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_PropertyValue_PropertyValueExtensionDefaultTypeInternal _Payload_PropertyValue_PropertyValueExtension_default_instance_;
constexpr Payload_PropertyValue::Payload_PropertyValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0u)
  , is_null_(false)
  , _oneof_case_{}{}
struct Payload_PropertyValueDefaultTypeInternal {
  constexpr Payload_PropertyValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_PropertyValueDefaultTypeInternal() {}
  union {
    Payload_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_PropertyValueDefaultTypeInternal _Payload_PropertyValue_default_instance_;
constexpr Payload_PropertySet::Payload_PropertySet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , values_(){}
struct Payload_PropertySetDefaultTypeInternal {
  constexpr Payload_PropertySetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_PropertySetDefaultTypeInternal() {}
  union {
    Payload_PropertySet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_PropertySetDefaultTypeInternal _Payload_PropertySet_default_instance_;
constexpr Payload_PropertySetList::Payload_PropertySetList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : propertyset_(){}
struct Payload_PropertySetListDefaultTypeInternal {
  constexpr Payload_PropertySetListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_PropertySetListDefaultTypeInternal() {}
  union {
    Payload_PropertySetList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_PropertySetListDefaultTypeInternal _Payload_PropertySetList_default_instance_;
constexpr Payload_MetaData::Payload_MetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , md5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(uint64_t{0u})
  , seq_(uint64_t{0u})
  , is_multi_part_(false){}
struct Payload_MetaDataDefaultTypeInternal {
  constexpr Payload_MetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_MetaDataDefaultTypeInternal() {}
  union {
    Payload_MetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_MetaDataDefaultTypeInternal _Payload_MetaData_default_instance_;
constexpr Payload_Metric_MetricValueExtension::Payload_Metric_MetricValueExtension(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Payload_Metric_MetricValueExtensionDefaultTypeInternal {
  constexpr Payload_Metric_MetricValueExtensionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_Metric_MetricValueExtensionDefaultTypeInternal() {}
  union {
    Payload_Metric_MetricValueExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_Metric_MetricValueExtensionDefaultTypeInternal _Payload_Metric_MetricValueExtension_default_instance_;
constexpr Payload_Metric::Payload_Metric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , properties_(nullptr)
  , alias_(uint64_t{0u})
  , timestamp_(uint64_t{0u})
  , datatype_(0u)
  , is_historical_(false)
  , is_transient_(false)
  , is_null_(false)
  , _oneof_case_{}{}
struct Payload_MetricDefaultTypeInternal {
  constexpr Payload_MetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_MetricDefaultTypeInternal() {}
  union {
    Payload_Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_MetricDefaultTypeInternal _Payload_Metric_default_instance_;
constexpr Payload::Payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrics_()
  , uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(uint64_t{0u})
  , seq_(uint64_t{0u}){}
struct PayloadDefaultTypeInternal {
  constexpr PayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PayloadDefaultTypeInternal() {}
  union {
    Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PayloadDefaultTypeInternal _Payload_default_instance_;
}  // namespace protobuf
}  // namespace sparkplug
}  // namespace cirruslink
}  // namespace com
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sparkplug_5fb_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sparkplug_5fb_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sparkplug_5fb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sparkplug_5fb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter, name_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter, value_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template, version_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template, metrics_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template, parameters_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template, template_ref_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Template, is_definition_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row, elements_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet, num_of_columns_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet, columns_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet, types_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_DataSet, rows_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue, type_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue, is_null_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue, value_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet, keys_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList, propertyset_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, is_multi_part_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, content_type_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, size_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, seq_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, file_name_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, file_type_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, md5_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_MetaData, description_),
  7,
  0,
  5,
  6,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, name_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, alias_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, timestamp_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, datatype_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, is_historical_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, is_transient_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, is_null_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, properties_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload_Metric, value_),
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload, timestamp_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload, metrics_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload, seq_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload, uuid_),
  PROTOBUF_FIELD_OFFSET(::com::cirruslink::sparkplug::protobuf::Payload, body_),
  2,
  ~0u,
  3,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension)},
  { 5, 20, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter)},
  { 29, 39, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_Template)},
  { 44, -1, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension)},
  { 49, -1, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue)},
  { 62, -1, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row)},
  { 68, 77, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_DataSet)},
  { 81, -1, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension)},
  { 86, 103, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue)},
  { 114, -1, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet)},
  { 121, -1, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList)},
  { 127, 140, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_MetaData)},
  { 148, -1, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension)},
  { 153, 178, sizeof(::com::cirruslink::sparkplug::protobuf::Payload_Metric)},
  { 197, 207, sizeof(::com::cirruslink::sparkplug::protobuf::Payload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_Template_Parameter_ParameterValueExtension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_Template_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_Template_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_DataSet_DataSetValue_DataSetValueExtension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_DataSet_DataSetValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_DataSet_Row_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_DataSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_PropertyValue_PropertyValueExtension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_PropertyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_PropertySet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_PropertySetList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_MetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_Metric_MetricValueExtension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_Metric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::cirruslink::sparkplug::protobuf::_Payload_default_instance_),
};

const char descriptor_table_protodef_sparkplug_5fb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sparkplug_b.proto\022!com.cirruslink.spar"
  "kplug.protobuf\"\366\026\n\007Payload\022\021\n\ttimestamp\030"
  "\001 \001(\004\022B\n\007metrics\030\002 \003(\01321.com.cirruslink."
  "sparkplug.protobuf.Payload.Metric\022\013\n\003seq"
  "\030\003 \001(\004\022\014\n\004uuid\030\004 \001(\t\022\014\n\004body\030\005 \001(\014\032\276\004\n\010T"
  "emplate\022\017\n\007version\030\001 \001(\t\022B\n\007metrics\030\002 \003("
  "\01321.com.cirruslink.sparkplug.protobuf.Pa"
  "yload.Metric\022Q\n\nparameters\030\003 \003(\0132=.com.c"
  "irruslink.sparkplug.protobuf.Payload.Tem"
  "plate.Parameter\022\024\n\014template_ref\030\004 \001(\t\022\025\n"
  "\ris_definition\030\005 \001(\010\032\322\002\n\tParameter\022\014\n\004na"
  "me\030\001 \001(\t\022\014\n\004type\030\002 \001(\r\022\023\n\tint_value\030\003 \001("
  "\rH\000\022\024\n\nlong_value\030\004 \001(\004H\000\022\025\n\013float_value"
  "\030\005 \001(\002H\000\022\026\n\014double_value\030\006 \001(\001H\000\022\027\n\rbool"
  "ean_value\030\007 \001(\010H\000\022\026\n\014string_value\030\010 \001(\tH"
  "\000\022p\n\017extension_value\030\t \001(\0132U.com.cirrusl"
  "ink.sparkplug.protobuf.Payload.Template."
  "Parameter.ParameterValueExtensionH\000\032#\n\027P"
  "arameterValueExtension*\010\010\001\020\200\200\200\200\002B\007\n\005valu"
  "e*\010\010\006\020\200\200\200\200\002\032\257\004\n\007DataSet\022\026\n\016num_of_column"
  "s\030\001 \001(\004\022\017\n\007columns\030\002 \003(\t\022\r\n\005types\030\003 \003(\r\022"
  "D\n\004rows\030\004 \003(\01326.com.cirruslink.sparkplug"
  ".protobuf.Payload.DataSet.Row\032\267\002\n\014DataSe"
  "tValue\022\023\n\tint_value\030\001 \001(\rH\000\022\024\n\nlong_valu"
  "e\030\002 \001(\004H\000\022\025\n\013float_value\030\003 \001(\002H\000\022\026\n\014doub"
  "le_value\030\004 \001(\001H\000\022\027\n\rboolean_value\030\005 \001(\010H"
  "\000\022\026\n\014string_value\030\006 \001(\tH\000\022p\n\017extension_v"
  "alue\030\007 \001(\0132U.com.cirruslink.sparkplug.pr"
  "otobuf.Payload.DataSet.DataSetValue.Data"
  "SetValueExtensionH\000\032!\n\025DataSetValueExten"
  "sion*\010\010\001\020\200\200\200\200\002B\007\n\005value\032b\n\003Row\022Q\n\010elemen"
  "ts\030\001 \003(\0132\?.com.cirruslink.sparkplug.prot"
  "obuf.Payload.DataSet.DataSetValue*\010\010\002\020\200\200"
  "\200\200\002*\010\010\005\020\200\200\200\200\002\032\201\004\n\rPropertyValue\022\014\n\004type\030"
  "\001 \001(\r\022\017\n\007is_null\030\002 \001(\010\022\023\n\tint_value\030\003 \001("
  "\rH\000\022\024\n\nlong_value\030\004 \001(\004H\000\022\025\n\013float_value"
  "\030\005 \001(\002H\000\022\026\n\014double_value\030\006 \001(\001H\000\022\027\n\rbool"
  "ean_value\030\007 \001(\010H\000\022\026\n\014string_value\030\010 \001(\tH"
  "\000\022S\n\021propertyset_value\030\t \001(\01326.com.cirru"
  "slink.sparkplug.protobuf.Payload.Propert"
  "ySetH\000\022X\n\022propertysets_value\030\n \001(\0132:.com"
  ".cirruslink.sparkplug.protobuf.Payload.P"
  "ropertySetListH\000\022j\n\017extension_value\030\013 \001("
  "\0132O.com.cirruslink.sparkplug.protobuf.Pa"
  "yload.PropertyValue.PropertyValueExtensi"
  "onH\000\032\"\n\026PropertyValueExtension*\010\010\001\020\200\200\200\200\002"
  "B\007\n\005value\032o\n\013PropertySet\022\014\n\004keys\030\001 \003(\t\022H"
  "\n\006values\030\002 \003(\01328.com.cirruslink.sparkplu"
  "g.protobuf.Payload.PropertyValue*\010\010\003\020\200\200\200"
  "\200\002\032h\n\017PropertySetList\022K\n\013propertyset\030\001 \003"
  "(\01326.com.cirruslink.sparkplug.protobuf.P"
  "ayload.PropertySet*\010\010\002\020\200\200\200\200\002\032\244\001\n\010MetaDat"
  "a\022\025\n\ris_multi_part\030\001 \001(\010\022\024\n\014content_type"
  "\030\002 \001(\t\022\014\n\004size\030\003 \001(\004\022\013\n\003seq\030\004 \001(\004\022\021\n\tfil"
  "e_name\030\005 \001(\t\022\021\n\tfile_type\030\006 \001(\t\022\013\n\003md5\030\007"
  " \001(\t\022\023\n\013description\030\010 \001(\t*\010\010\t\020\200\200\200\200\002\032\347\005\n\006"
  "Metric\022\014\n\004name\030\001 \001(\t\022\r\n\005alias\030\002 \001(\004\022\021\n\tt"
  "imestamp\030\003 \001(\004\022\020\n\010datatype\030\004 \001(\r\022\025\n\ris_h"
  "istorical\030\005 \001(\010\022\024\n\014is_transient\030\006 \001(\010\022\017\n"
  "\007is_null\030\007 \001(\010\022E\n\010metadata\030\010 \001(\01323.com.c"
  "irruslink.sparkplug.protobuf.Payload.Met"
  "aData\022J\n\nproperties\030\t \001(\01326.com.cirrusli"
  "nk.sparkplug.protobuf.Payload.PropertySe"
  "t\022\023\n\tint_value\030\n \001(\rH\000\022\024\n\nlong_value\030\013 \001"
  "(\004H\000\022\025\n\013float_value\030\014 \001(\002H\000\022\026\n\014double_va"
  "lue\030\r \001(\001H\000\022\027\n\rboolean_value\030\016 \001(\010H\000\022\026\n\014"
  "string_value\030\017 \001(\tH\000\022\025\n\013bytes_value\030\020 \001("
  "\014H\000\022K\n\rdataset_value\030\021 \001(\01322.com.cirrusl"
  "ink.sparkplug.protobuf.Payload.DataSetH\000"
  "\022M\n\016template_value\030\022 \001(\01323.com.cirruslin"
  "k.sparkplug.protobuf.Payload.TemplateH\000\022"
  "a\n\017extension_value\030\023 \001(\0132F.com.cirruslin"
  "k.sparkplug.protobuf.Payload.Metric.Metr"
  "icValueExtensionH\000\032 \n\024MetricValueExtensi"
  "on*\010\010\001\020\200\200\200\200\002B\007\n\005value*\010\010\006\020\200\200\200\200\002B4\n!com.c"
  "irruslink.sparkplug.protobufB\017SparkplugB"
  "Proto"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sparkplug_5fb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sparkplug_5fb_2eproto = {
  false, false, 3045, descriptor_table_protodef_sparkplug_5fb_2eproto, "sparkplug_b.proto", 
  &descriptor_table_sparkplug_5fb_2eproto_once, nullptr, 0, 15,
  schemas, file_default_instances, TableStruct_sparkplug_5fb_2eproto::offsets,
  file_level_metadata_sparkplug_5fb_2eproto, file_level_enum_descriptors_sparkplug_5fb_2eproto, file_level_service_descriptors_sparkplug_5fb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sparkplug_5fb_2eproto_getter() {
  return &descriptor_table_sparkplug_5fb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sparkplug_5fb_2eproto(&descriptor_table_sparkplug_5fb_2eproto);
namespace com {
namespace cirruslink {
namespace sparkplug {
namespace protobuf {

// ===================================================================

class Payload_Template_Parameter_ParameterValueExtension::_Internal {
 public:
};

Payload_Template_Parameter_ParameterValueExtension::Payload_Template_Parameter_ParameterValueExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
}
Payload_Template_Parameter_ParameterValueExtension::Payload_Template_Parameter_ParameterValueExtension(const Payload_Template_Parameter_ParameterValueExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
}

inline void Payload_Template_Parameter_ParameterValueExtension::SharedCtor() {
}

Payload_Template_Parameter_ParameterValueExtension::~Payload_Template_Parameter_ParameterValueExtension() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_Template_Parameter_ParameterValueExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Payload_Template_Parameter_ParameterValueExtension::ArenaDtor(void* object) {
  Payload_Template_Parameter_ParameterValueExtension* _this = reinterpret_cast< Payload_Template_Parameter_ParameterValueExtension* >(object);
  (void)_this;
}
void Payload_Template_Parameter_ParameterValueExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_Template_Parameter_ParameterValueExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_Template_Parameter_ParameterValueExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_Template_Parameter_ParameterValueExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_Template_Parameter_ParameterValueExtension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
      1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
  return target;
}

size_t Payload_Template_Parameter_ParameterValueExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_Template_Parameter_ParameterValueExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_Template_Parameter_ParameterValueExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_Template_Parameter_ParameterValueExtension::GetClassData() const { return &_class_data_; }

void Payload_Template_Parameter_ParameterValueExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_Template_Parameter_ParameterValueExtension *>(to)->MergeFrom(
      static_cast<const Payload_Template_Parameter_ParameterValueExtension &>(from));
}


void Payload_Template_Parameter_ParameterValueExtension::MergeFrom(const Payload_Template_Parameter_ParameterValueExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_Template_Parameter_ParameterValueExtension::CopyFrom(const Payload_Template_Parameter_ParameterValueExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_Template_Parameter_ParameterValueExtension::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Payload_Template_Parameter_ParameterValueExtension::InternalSwap(Payload_Template_Parameter_ParameterValueExtension* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_Template_Parameter_ParameterValueExtension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[0]);
}

// ===================================================================

class Payload_Template_Parameter::_Internal {
 public:
  using HasBits = decltype(std::declval<Payload_Template_Parameter>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension& extension_value(const Payload_Template_Parameter* msg);
};

const ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension&
Payload_Template_Parameter::_Internal::extension_value(const Payload_Template_Parameter* msg) {
  return *msg->value_.extension_value_;
}
void Payload_Template_Parameter::set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* extension_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (extension_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension>::GetOwningArena(extension_value);
    if (message_arena != submessage_arena) {
      extension_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_value, submessage_arena);
    }
    set_has_extension_value();
    value_.extension_value_ = extension_value;
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.extension_value)
}
Payload_Template_Parameter::Payload_Template_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
}
Payload_Template_Parameter::Payload_Template_Parameter(const Payload_Template_Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBooleanValue: {
      _internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kExtensionValue: {
      _internal_mutable_extension_value()->::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension::MergeFrom(from._internal_extension_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
}

inline void Payload_Template_Parameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0u;
clear_has_value();
}

Payload_Template_Parameter::~Payload_Template_Parameter() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_Template_Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void Payload_Template_Parameter::ArenaDtor(void* object) {
  Payload_Template_Parameter* _this = reinterpret_cast< Payload_Template_Parameter* >(object);
  (void)_this;
}
void Payload_Template_Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_Template_Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_Template_Parameter::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kExtensionValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.extension_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Payload_Template_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  type_ = 0u;
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_Template_Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 int_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 long_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool boolean_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_boolean_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension extension_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_Template_Parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  switch (value_case()) {
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_int_value(), target);
      break;
    }
    case kLongValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_long_value(), target);
      break;
    }
    case kFloatValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_float_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_double_value(), target);
      break;
    }
    case kBooleanValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_boolean_value(), target);
      break;
    }
    case kStringValue: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.string_value");
      target = stream->WriteStringMaybeAliased(
          8, this->_internal_string_value(), target);
      break;
    }
    case kExtensionValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::extension_value(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
  return target;
}

size_t Payload_Template_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  switch (value_case()) {
    // uint32 int_value = 3;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_int_value());
      break;
    }
    // uint64 long_value = 4;
    case kLongValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_long_value());
      break;
    }
    // float float_value = 5;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 6;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool boolean_value = 7;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // string string_value = 8;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // .com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter.ParameterValueExtension extension_value = 9;
    case kExtensionValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.extension_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_Template_Parameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_Template_Parameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_Template_Parameter::GetClassData() const { return &_class_data_; }

void Payload_Template_Parameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_Template_Parameter *>(to)->MergeFrom(
      static_cast<const Payload_Template_Parameter &>(from));
}


void Payload_Template_Parameter::MergeFrom(const Payload_Template_Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBooleanValue: {
      _internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kExtensionValue: {
      _internal_mutable_extension_value()->::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension::MergeFrom(from._internal_extension_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_Template_Parameter::CopyFrom(const Payload_Template_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_Template_Parameter::IsInitialized() const {
  switch (value_case()) {
    case kIntValue: {
      break;
    }
    case kLongValue: {
      break;
    }
    case kFloatValue: {
      break;
    }
    case kDoubleValue: {
      break;
    }
    case kBooleanValue: {
      break;
    }
    case kStringValue: {
      break;
    }
    case kExtensionValue: {
      if (has_extension_value()) {
        if (!this->extension_value().IsInitialized()) return false;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Payload_Template_Parameter::InternalSwap(Payload_Template_Parameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(type_, other->type_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_Template_Parameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[1]);
}

// ===================================================================

class Payload_Template::_Internal {
 public:
  using HasBits = decltype(std::declval<Payload_Template>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_template_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_definition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Payload_Template::Payload_Template(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  metrics_(arena),
  parameters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.Template)
}
Payload_Template::Payload_Template(const Payload_Template& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  template_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_template_ref()) {
    template_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_ref(), 
      GetArenaForAllocation());
  }
  is_definition_ = from.is_definition_;
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.Template)
}

inline void Payload_Template::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
template_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_definition_ = false;
}

Payload_Template::~Payload_Template() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.Template)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_Template::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Payload_Template::ArenaDtor(void* object) {
  Payload_Template* _this = reinterpret_cast< Payload_Template* >(object);
  (void)_this;
}
void Payload_Template::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_Template::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_Template::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.Template)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  metrics_.Clear();
  parameters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      template_ref_.ClearNonDefaultToEmpty();
    }
  }
  is_definition_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_Template::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.Template.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string template_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_template_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.Template.template_ref");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_definition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_definition(&has_bits);
          is_definition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((48u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_Template::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.Template)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.Template.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metrics(i), target, stream);
  }

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter parameters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_parameters(i), target, stream);
  }

  // optional string template_ref = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_ref().data(), static_cast<int>(this->_internal_template_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.Template.template_ref");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_template_ref(), target);
  }

  // optional bool is_definition = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_definition(), target);
  }

  // Extension range [6, 536870912)
  target = _extensions_._InternalSerialize(
      6, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.Template)
  return target;
}

size_t Payload_Template::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.Template)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.Template.Parameter parameters = 3;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string template_ref = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_ref());
    }

    // optional bool is_definition = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_Template::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_Template::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_Template::GetClassData() const { return &_class_data_; }

void Payload_Template::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_Template *>(to)->MergeFrom(
      static_cast<const Payload_Template &>(from));
}


void Payload_Template::MergeFrom(const Payload_Template& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.Template)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  parameters_.MergeFrom(from.parameters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_template_ref(from._internal_template_ref());
    }
    if (cached_has_bits & 0x00000004u) {
      is_definition_ = from.is_definition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_Template::CopyFrom(const Payload_Template& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.Template)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_Template::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrics_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(parameters_)) return false;
  return true;
}

void Payload_Template::InternalSwap(Payload_Template* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.InternalSwap(&other->metrics_);
  parameters_.InternalSwap(&other->parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &template_ref_, GetArenaForAllocation(),
      &other->template_ref_, other->GetArenaForAllocation()
  );
  swap(is_definition_, other->is_definition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_Template::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[2]);
}

// ===================================================================

class Payload_DataSet_DataSetValue_DataSetValueExtension::_Internal {
 public:
};

Payload_DataSet_DataSetValue_DataSetValueExtension::Payload_DataSet_DataSetValue_DataSetValueExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
}
Payload_DataSet_DataSetValue_DataSetValueExtension::Payload_DataSet_DataSetValue_DataSetValueExtension(const Payload_DataSet_DataSetValue_DataSetValueExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
}

inline void Payload_DataSet_DataSetValue_DataSetValueExtension::SharedCtor() {
}

Payload_DataSet_DataSetValue_DataSetValueExtension::~Payload_DataSet_DataSetValue_DataSetValueExtension() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_DataSet_DataSetValue_DataSetValueExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Payload_DataSet_DataSetValue_DataSetValueExtension::ArenaDtor(void* object) {
  Payload_DataSet_DataSetValue_DataSetValueExtension* _this = reinterpret_cast< Payload_DataSet_DataSetValue_DataSetValueExtension* >(object);
  (void)_this;
}
void Payload_DataSet_DataSetValue_DataSetValueExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_DataSet_DataSetValue_DataSetValueExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_DataSet_DataSetValue_DataSetValueExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_DataSet_DataSetValue_DataSetValueExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_DataSet_DataSetValue_DataSetValueExtension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
      1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
  return target;
}

size_t Payload_DataSet_DataSetValue_DataSetValueExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_DataSet_DataSetValue_DataSetValueExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_DataSet_DataSetValue_DataSetValueExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_DataSet_DataSetValue_DataSetValueExtension::GetClassData() const { return &_class_data_; }

void Payload_DataSet_DataSetValue_DataSetValueExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_DataSet_DataSetValue_DataSetValueExtension *>(to)->MergeFrom(
      static_cast<const Payload_DataSet_DataSetValue_DataSetValueExtension &>(from));
}


void Payload_DataSet_DataSetValue_DataSetValueExtension::MergeFrom(const Payload_DataSet_DataSetValue_DataSetValueExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_DataSet_DataSetValue_DataSetValueExtension::CopyFrom(const Payload_DataSet_DataSetValue_DataSetValueExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_DataSet_DataSetValue_DataSetValueExtension::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Payload_DataSet_DataSetValue_DataSetValueExtension::InternalSwap(Payload_DataSet_DataSetValue_DataSetValueExtension* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_DataSet_DataSetValue_DataSetValueExtension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[3]);
}

// ===================================================================

class Payload_DataSet_DataSetValue::_Internal {
 public:
  static const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension& extension_value(const Payload_DataSet_DataSetValue* msg);
};

const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension&
Payload_DataSet_DataSetValue::_Internal::extension_value(const Payload_DataSet_DataSetValue* msg) {
  return *msg->value_.extension_value_;
}
void Payload_DataSet_DataSetValue::set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* extension_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (extension_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension>::GetOwningArena(extension_value);
    if (message_arena != submessage_arena) {
      extension_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_value, submessage_arena);
    }
    set_has_extension_value();
    value_.extension_value_ = extension_value;
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.extension_value)
}
Payload_DataSet_DataSetValue::Payload_DataSet_DataSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
}
Payload_DataSet_DataSetValue::Payload_DataSet_DataSetValue(const Payload_DataSet_DataSetValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBooleanValue: {
      _internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kExtensionValue: {
      _internal_mutable_extension_value()->::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension::MergeFrom(from._internal_extension_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
}

inline void Payload_DataSet_DataSetValue::SharedCtor() {
clear_has_value();
}

Payload_DataSet_DataSetValue::~Payload_DataSet_DataSetValue() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_DataSet_DataSetValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Payload_DataSet_DataSetValue::ArenaDtor(void* object) {
  Payload_DataSet_DataSetValue* _this = reinterpret_cast< Payload_DataSet_DataSetValue* >(object);
  (void)_this;
}
void Payload_DataSet_DataSetValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_DataSet_DataSetValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_DataSet_DataSetValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kExtensionValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.extension_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Payload_DataSet_DataSetValue::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_DataSet_DataSetValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 int_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 long_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool boolean_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_boolean_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension extension_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_DataSet_DataSetValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_int_value(), target);
      break;
    }
    case kLongValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_long_value(), target);
      break;
    }
    case kFloatValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_float_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(), target);
      break;
    }
    case kBooleanValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_boolean_value(), target);
      break;
    }
    case kStringValue: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.string_value");
      target = stream->WriteStringMaybeAliased(
          6, this->_internal_string_value(), target);
      break;
    }
    case kExtensionValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::extension_value(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
  return target;
}

size_t Payload_DataSet_DataSetValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // uint32 int_value = 1;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_int_value());
      break;
    }
    // uint64 long_value = 2;
    case kLongValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_long_value());
      break;
    }
    // float float_value = 3;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool boolean_value = 5;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // string string_value = 6;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // .com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue.DataSetValueExtension extension_value = 7;
    case kExtensionValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.extension_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_DataSet_DataSetValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_DataSet_DataSetValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_DataSet_DataSetValue::GetClassData() const { return &_class_data_; }

void Payload_DataSet_DataSetValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_DataSet_DataSetValue *>(to)->MergeFrom(
      static_cast<const Payload_DataSet_DataSetValue &>(from));
}


void Payload_DataSet_DataSetValue::MergeFrom(const Payload_DataSet_DataSetValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBooleanValue: {
      _internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kExtensionValue: {
      _internal_mutable_extension_value()->::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension::MergeFrom(from._internal_extension_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_DataSet_DataSetValue::CopyFrom(const Payload_DataSet_DataSetValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_DataSet_DataSetValue::IsInitialized() const {
  switch (value_case()) {
    case kIntValue: {
      break;
    }
    case kLongValue: {
      break;
    }
    case kFloatValue: {
      break;
    }
    case kDoubleValue: {
      break;
    }
    case kBooleanValue: {
      break;
    }
    case kStringValue: {
      break;
    }
    case kExtensionValue: {
      if (has_extension_value()) {
        if (!this->extension_value().IsInitialized()) return false;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Payload_DataSet_DataSetValue::InternalSwap(Payload_DataSet_DataSetValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_DataSet_DataSetValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[4]);
}

// ===================================================================

class Payload_DataSet_Row::_Internal {
 public:
};

Payload_DataSet_Row::Payload_DataSet_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  elements_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
}
Payload_DataSet_Row::Payload_DataSet_Row(const Payload_DataSet_Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
}

inline void Payload_DataSet_Row::SharedCtor() {
}

Payload_DataSet_Row::~Payload_DataSet_Row() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_DataSet_Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Payload_DataSet_Row::ArenaDtor(void* object) {
  Payload_DataSet_Row* _this = reinterpret_cast< Payload_DataSet_Row* >(object);
  (void)_this;
}
void Payload_DataSet_Row::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_DataSet_Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_DataSet_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  elements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_DataSet_Row::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((16u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_DataSet_Row::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  // Extension range [2, 536870912)
  target = _extensions_._InternalSerialize(
      2, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
  return target;
}

size_t Payload_DataSet_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.DataSetValue elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_DataSet_Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_DataSet_Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_DataSet_Row::GetClassData() const { return &_class_data_; }

void Payload_DataSet_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_DataSet_Row *>(to)->MergeFrom(
      static_cast<const Payload_DataSet_Row &>(from));
}


void Payload_DataSet_Row::MergeFrom(const Payload_DataSet_Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_DataSet_Row::CopyFrom(const Payload_DataSet_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_DataSet_Row::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(elements_)) return false;
  return true;
}

void Payload_DataSet_Row::InternalSwap(Payload_DataSet_Row* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_DataSet_Row::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[5]);
}

// ===================================================================

class Payload_DataSet::_Internal {
 public:
  using HasBits = decltype(std::declval<Payload_DataSet>()._has_bits_);
  static void set_has_num_of_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Payload_DataSet::Payload_DataSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  columns_(arena),
  types_(arena),
  rows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
}
Payload_DataSet::Payload_DataSet(const Payload_DataSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      columns_(from.columns_),
      types_(from.types_),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  num_of_columns_ = from.num_of_columns_;
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
}

inline void Payload_DataSet::SharedCtor() {
num_of_columns_ = uint64_t{0u};
}

Payload_DataSet::~Payload_DataSet() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_DataSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Payload_DataSet::ArenaDtor(void* object) {
  Payload_DataSet* _this = reinterpret_cast< Payload_DataSet* >(object);
  (void)_this;
}
void Payload_DataSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_DataSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_DataSet::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  columns_.Clear();
  types_.Clear();
  rows_.Clear();
  num_of_columns_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_DataSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 num_of_columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_of_columns(&has_bits);
          num_of_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((40u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_DataSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 num_of_columns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_num_of_columns(), target);
  }

  // repeated string columns = 2;
  for (int i = 0, n = this->_internal_columns_size(); i < n; i++) {
    const auto& s = this->_internal_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.DataSet.columns");
    target = stream->WriteString(2, s, target);
  }

  // repeated uint32 types = 3;
  for (int i = 0, n = this->_internal_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_types(i), target);
  }

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row rows = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rows(i), target, stream);
  }

  // Extension range [5, 536870912)
  target = _extensions_._InternalSerialize(
      5, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
  return target;
}

size_t Payload_DataSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_.size());
  for (int i = 0, n = columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_.Get(i));
  }

  // repeated uint32 types = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->types_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_types_size());
    total_size += data_size;
  }

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.DataSet.Row rows = 4;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 num_of_columns = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_of_columns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_DataSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_DataSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_DataSet::GetClassData() const { return &_class_data_; }

void Payload_DataSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_DataSet *>(to)->MergeFrom(
      static_cast<const Payload_DataSet &>(from));
}


void Payload_DataSet::MergeFrom(const Payload_DataSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  types_.MergeFrom(from.types_);
  rows_.MergeFrom(from.rows_);
  if (from._internal_has_num_of_columns()) {
    _internal_set_num_of_columns(from._internal_num_of_columns());
  }
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_DataSet::CopyFrom(const Payload_DataSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.DataSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_DataSet::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rows_)) return false;
  return true;
}

void Payload_DataSet::InternalSwap(Payload_DataSet* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  columns_.InternalSwap(&other->columns_);
  types_.InternalSwap(&other->types_);
  rows_.InternalSwap(&other->rows_);
  swap(num_of_columns_, other->num_of_columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_DataSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[6]);
}

// ===================================================================

class Payload_PropertyValue_PropertyValueExtension::_Internal {
 public:
};

Payload_PropertyValue_PropertyValueExtension::Payload_PropertyValue_PropertyValueExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
}
Payload_PropertyValue_PropertyValueExtension::Payload_PropertyValue_PropertyValueExtension(const Payload_PropertyValue_PropertyValueExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
}

inline void Payload_PropertyValue_PropertyValueExtension::SharedCtor() {
}

Payload_PropertyValue_PropertyValueExtension::~Payload_PropertyValue_PropertyValueExtension() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_PropertyValue_PropertyValueExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Payload_PropertyValue_PropertyValueExtension::ArenaDtor(void* object) {
  Payload_PropertyValue_PropertyValueExtension* _this = reinterpret_cast< Payload_PropertyValue_PropertyValueExtension* >(object);
  (void)_this;
}
void Payload_PropertyValue_PropertyValueExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_PropertyValue_PropertyValueExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_PropertyValue_PropertyValueExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_PropertyValue_PropertyValueExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_PropertyValue_PropertyValueExtension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
      1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
  return target;
}

size_t Payload_PropertyValue_PropertyValueExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_PropertyValue_PropertyValueExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_PropertyValue_PropertyValueExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_PropertyValue_PropertyValueExtension::GetClassData() const { return &_class_data_; }

void Payload_PropertyValue_PropertyValueExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_PropertyValue_PropertyValueExtension *>(to)->MergeFrom(
      static_cast<const Payload_PropertyValue_PropertyValueExtension &>(from));
}


void Payload_PropertyValue_PropertyValueExtension::MergeFrom(const Payload_PropertyValue_PropertyValueExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_PropertyValue_PropertyValueExtension::CopyFrom(const Payload_PropertyValue_PropertyValueExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_PropertyValue_PropertyValueExtension::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Payload_PropertyValue_PropertyValueExtension::InternalSwap(Payload_PropertyValue_PropertyValueExtension* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_PropertyValue_PropertyValueExtension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[7]);
}

// ===================================================================

class Payload_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<Payload_PropertyValue>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& propertyset_value(const Payload_PropertyValue* msg);
  static const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList& propertysets_value(const Payload_PropertyValue* msg);
  static const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension& extension_value(const Payload_PropertyValue* msg);
};

const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet&
Payload_PropertyValue::_Internal::propertyset_value(const Payload_PropertyValue* msg) {
  return *msg->value_.propertyset_value_;
}
const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList&
Payload_PropertyValue::_Internal::propertysets_value(const Payload_PropertyValue* msg) {
  return *msg->value_.propertysets_value_;
}
const ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension&
Payload_PropertyValue::_Internal::extension_value(const Payload_PropertyValue* msg) {
  return *msg->value_.extension_value_;
}
void Payload_PropertyValue::set_allocated_propertyset_value(::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* propertyset_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (propertyset_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_PropertySet>::GetOwningArena(propertyset_value);
    if (message_arena != submessage_arena) {
      propertyset_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, propertyset_value, submessage_arena);
    }
    set_has_propertyset_value();
    value_.propertyset_value_ = propertyset_value;
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertyset_value)
}
void Payload_PropertyValue::set_allocated_propertysets_value(::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* propertysets_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (propertysets_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList>::GetOwningArena(propertysets_value);
    if (message_arena != submessage_arena) {
      propertysets_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, propertysets_value, submessage_arena);
    }
    set_has_propertysets_value();
    value_.propertysets_value_ = propertysets_value;
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.propertysets_value)
}
void Payload_PropertyValue::set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* extension_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (extension_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension>::GetOwningArena(extension_value);
    if (message_arena != submessage_arena) {
      extension_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_value, submessage_arena);
    }
    set_has_extension_value();
    value_.extension_value_ = extension_value;
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.extension_value)
}
Payload_PropertyValue::Payload_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
}
Payload_PropertyValue::Payload_PropertyValue(const Payload_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_null_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_null_));
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBooleanValue: {
      _internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kPropertysetValue: {
      _internal_mutable_propertyset_value()->::com::cirruslink::sparkplug::protobuf::Payload_PropertySet::MergeFrom(from._internal_propertyset_value());
      break;
    }
    case kPropertysetsValue: {
      _internal_mutable_propertysets_value()->::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList::MergeFrom(from._internal_propertysets_value());
      break;
    }
    case kExtensionValue: {
      _internal_mutable_extension_value()->::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension::MergeFrom(from._internal_extension_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
}

inline void Payload_PropertyValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_null_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_null_));
clear_has_value();
}

Payload_PropertyValue::~Payload_PropertyValue() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Payload_PropertyValue::ArenaDtor(void* object) {
  Payload_PropertyValue* _this = reinterpret_cast< Payload_PropertyValue* >(object);
  (void)_this;
}
void Payload_PropertyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_PropertyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_PropertyValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kPropertysetValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.propertyset_value_;
      }
      break;
    }
    case kPropertysetsValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.propertysets_value_;
      }
      break;
    }
    case kExtensionValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.extension_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Payload_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_null_) -
        reinterpret_cast<char*>(&type_)) + sizeof(is_null_));
  }
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_PropertyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_null = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_null(&has_bits);
          is_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 int_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 long_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool boolean_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_boolean_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.cirruslink.sparkplug.protobuf.Payload.PropertySet propertyset_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_propertyset_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.cirruslink.sparkplug.protobuf.Payload.PropertySetList propertysets_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_propertysets_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension extension_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_PropertyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional bool is_null = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_null(), target);
  }

  switch (value_case()) {
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_int_value(), target);
      break;
    }
    case kLongValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_long_value(), target);
      break;
    }
    case kFloatValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_float_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_double_value(), target);
      break;
    }
    case kBooleanValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_boolean_value(), target);
      break;
    }
    case kStringValue: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.string_value");
      target = stream->WriteStringMaybeAliased(
          8, this->_internal_string_value(), target);
      break;
    }
    case kPropertysetValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::propertyset_value(this), target, stream);
      break;
    }
    case kPropertysetsValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::propertysets_value(this), target, stream);
      break;
    }
    case kExtensionValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::extension_value(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
  return target;
}

size_t Payload_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional bool is_null = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  switch (value_case()) {
    // uint32 int_value = 3;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_int_value());
      break;
    }
    // uint64 long_value = 4;
    case kLongValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_long_value());
      break;
    }
    // float float_value = 5;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 6;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool boolean_value = 7;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // string string_value = 8;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // .com.cirruslink.sparkplug.protobuf.Payload.PropertySet propertyset_value = 9;
    case kPropertysetValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.propertyset_value_);
      break;
    }
    // .com.cirruslink.sparkplug.protobuf.Payload.PropertySetList propertysets_value = 10;
    case kPropertysetsValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.propertysets_value_);
      break;
    }
    // .com.cirruslink.sparkplug.protobuf.Payload.PropertyValue.PropertyValueExtension extension_value = 11;
    case kExtensionValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.extension_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_PropertyValue::GetClassData() const { return &_class_data_; }

void Payload_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_PropertyValue *>(to)->MergeFrom(
      static_cast<const Payload_PropertyValue &>(from));
}


void Payload_PropertyValue::MergeFrom(const Payload_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_null_ = from.is_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBooleanValue: {
      _internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kPropertysetValue: {
      _internal_mutable_propertyset_value()->::com::cirruslink::sparkplug::protobuf::Payload_PropertySet::MergeFrom(from._internal_propertyset_value());
      break;
    }
    case kPropertysetsValue: {
      _internal_mutable_propertysets_value()->::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList::MergeFrom(from._internal_propertysets_value());
      break;
    }
    case kExtensionValue: {
      _internal_mutable_extension_value()->::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension::MergeFrom(from._internal_extension_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_PropertyValue::CopyFrom(const Payload_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_PropertyValue::IsInitialized() const {
  switch (value_case()) {
    case kIntValue: {
      break;
    }
    case kLongValue: {
      break;
    }
    case kFloatValue: {
      break;
    }
    case kDoubleValue: {
      break;
    }
    case kBooleanValue: {
      break;
    }
    case kStringValue: {
      break;
    }
    case kPropertysetValue: {
      if (has_propertyset_value()) {
        if (!this->propertyset_value().IsInitialized()) return false;
      }
      break;
    }
    case kPropertysetsValue: {
      if (has_propertysets_value()) {
        if (!this->propertysets_value().IsInitialized()) return false;
      }
      break;
    }
    case kExtensionValue: {
      if (has_extension_value()) {
        if (!this->extension_value().IsInitialized()) return false;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Payload_PropertyValue::InternalSwap(Payload_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payload_PropertyValue, is_null_)
      + sizeof(Payload_PropertyValue::is_null_)
      - PROTOBUF_FIELD_OFFSET(Payload_PropertyValue, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_PropertyValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[8]);
}

// ===================================================================

class Payload_PropertySet::_Internal {
 public:
};

Payload_PropertySet::Payload_PropertySet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  keys_(arena),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
}
Payload_PropertySet::Payload_PropertySet(const Payload_PropertySet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
}

inline void Payload_PropertySet::SharedCtor() {
}

Payload_PropertySet::~Payload_PropertySet() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_PropertySet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Payload_PropertySet::ArenaDtor(void* object) {
  Payload_PropertySet* _this = reinterpret_cast< Payload_PropertySet* >(object);
  (void)_this;
}
void Payload_PropertySet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_PropertySet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_PropertySet::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  keys_.Clear();
  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_PropertySet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertyValue values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((24u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_PropertySet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.PropertySet.keys");
    target = stream->WriteString(1, s, target);
  }

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertyValue values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  // Extension range [3, 536870912)
  target = _extensions_._InternalSerialize(
      3, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
  return target;
}

size_t Payload_PropertySet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertyValue values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_PropertySet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_PropertySet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_PropertySet::GetClassData() const { return &_class_data_; }

void Payload_PropertySet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_PropertySet *>(to)->MergeFrom(
      static_cast<const Payload_PropertySet &>(from));
}


void Payload_PropertySet::MergeFrom(const Payload_PropertySet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_PropertySet::CopyFrom(const Payload_PropertySet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_PropertySet::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(values_)) return false;
  return true;
}

void Payload_PropertySet::InternalSwap(Payload_PropertySet* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_PropertySet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[9]);
}

// ===================================================================

class Payload_PropertySetList::_Internal {
 public:
};

Payload_PropertySetList::Payload_PropertySetList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  propertyset_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
}
Payload_PropertySetList::Payload_PropertySetList(const Payload_PropertySetList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      propertyset_(from.propertyset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
}

inline void Payload_PropertySetList::SharedCtor() {
}

Payload_PropertySetList::~Payload_PropertySetList() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_PropertySetList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Payload_PropertySetList::ArenaDtor(void* object) {
  Payload_PropertySetList* _this = reinterpret_cast< Payload_PropertySetList* >(object);
  (void)_this;
}
void Payload_PropertySetList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_PropertySetList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_PropertySetList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  propertyset_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_PropertySetList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertySet propertyset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_propertyset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((16u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_PropertySetList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertySet propertyset = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_propertyset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_propertyset(i), target, stream);
  }

  // Extension range [2, 536870912)
  target = _extensions_._InternalSerialize(
      2, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
  return target;
}

size_t Payload_PropertySetList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.PropertySet propertyset = 1;
  total_size += 1UL * this->_internal_propertyset_size();
  for (const auto& msg : this->propertyset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_PropertySetList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_PropertySetList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_PropertySetList::GetClassData() const { return &_class_data_; }

void Payload_PropertySetList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_PropertySetList *>(to)->MergeFrom(
      static_cast<const Payload_PropertySetList &>(from));
}


void Payload_PropertySetList::MergeFrom(const Payload_PropertySetList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  propertyset_.MergeFrom(from.propertyset_);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_PropertySetList::CopyFrom(const Payload_PropertySetList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.PropertySetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_PropertySetList::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(propertyset_)) return false;
  return true;
}

void Payload_PropertySetList::InternalSwap(Payload_PropertySetList* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  propertyset_.InternalSwap(&other->propertyset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_PropertySetList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[10]);
}

// ===================================================================

class Payload_MetaData::_Internal {
 public:
  using HasBits = decltype(std::declval<Payload_MetaData>()._has_bits_);
  static void set_has_is_multi_part(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_md5(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Payload_MetaData::Payload_MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
}
Payload_MetaData::Payload_MetaData(const Payload_MetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content_type()) {
    content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_type(), 
      GetArenaForAllocation());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_type()) {
    file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_type(), 
      GetArenaForAllocation());
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_md5()) {
    md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_md5(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_multi_part_) -
    reinterpret_cast<char*>(&size_)) + sizeof(is_multi_part_));
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
}

inline void Payload_MetaData::SharedCtor() {
content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_multi_part_) -
    reinterpret_cast<char*>(&size_)) + sizeof(is_multi_part_));
}

Payload_MetaData::~Payload_MetaData() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_MetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Payload_MetaData::ArenaDtor(void* object) {
  Payload_MetaData* _this = reinterpret_cast< Payload_MetaData* >(object);
  (void)_this;
}
void Payload_MetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_MetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      content_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      file_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      md5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_multi_part_) -
        reinterpret_cast<char*>(&size_)) + sizeof(is_multi_part_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_MetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_multi_part = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_multi_part(&has_bits);
          is_multi_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.MetaData.content_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 seq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seq(&has_bits);
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_file_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string md5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.MetaData.md5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.MetaData.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((72u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_MetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_multi_part = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_multi_part(), target);
  }

  // optional string content_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.MetaData.content_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content_type(), target);
  }

  // optional uint64 size = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // optional uint64 seq = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_seq(), target);
  }

  // optional string file_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_file_name(), target);
  }

  // optional string file_type = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_type().data(), static_cast<int>(this->_internal_file_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.MetaData.file_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_file_type(), target);
  }

  // optional string md5 = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.MetaData.md5");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_md5(), target);
  }

  // optional string description = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.MetaData.description");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_description(), target);
  }

  // Extension range [9, 536870912)
  target = _extensions_._InternalSerialize(
      9, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
  return target;
}

size_t Payload_MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string content_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content_type());
    }

    // optional string file_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional string file_type = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_type());
    }

    // optional string md5 = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_md5());
    }

    // optional string description = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint64 size = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_size());
    }

    // optional uint64 seq = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_seq());
    }

    // optional bool is_multi_part = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_MetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_MetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_MetaData::GetClassData() const { return &_class_data_; }

void Payload_MetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_MetaData *>(to)->MergeFrom(
      static_cast<const Payload_MetaData &>(from));
}


void Payload_MetaData::MergeFrom(const Payload_MetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_content_type(from._internal_content_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_file_type(from._internal_file_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_md5(from._internal_md5());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000040u) {
      seq_ = from.seq_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_multi_part_ = from.is_multi_part_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_MetaData::CopyFrom(const Payload_MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_MetaData::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Payload_MetaData::InternalSwap(Payload_MetaData* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_type_, GetArenaForAllocation(),
      &other->content_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, GetArenaForAllocation(),
      &other->file_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_type_, GetArenaForAllocation(),
      &other->file_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &md5_, GetArenaForAllocation(),
      &other->md5_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payload_MetaData, is_multi_part_)
      + sizeof(Payload_MetaData::is_multi_part_)
      - PROTOBUF_FIELD_OFFSET(Payload_MetaData, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_MetaData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[11]);
}

// ===================================================================

class Payload_Metric_MetricValueExtension::_Internal {
 public:
};

Payload_Metric_MetricValueExtension::Payload_Metric_MetricValueExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
}
Payload_Metric_MetricValueExtension::Payload_Metric_MetricValueExtension(const Payload_Metric_MetricValueExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
}

inline void Payload_Metric_MetricValueExtension::SharedCtor() {
}

Payload_Metric_MetricValueExtension::~Payload_Metric_MetricValueExtension() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_Metric_MetricValueExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Payload_Metric_MetricValueExtension::ArenaDtor(void* object) {
  Payload_Metric_MetricValueExtension* _this = reinterpret_cast< Payload_Metric_MetricValueExtension* >(object);
  (void)_this;
}
void Payload_Metric_MetricValueExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_Metric_MetricValueExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_Metric_MetricValueExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_Metric_MetricValueExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_Metric_MetricValueExtension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
      1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
  return target;
}

size_t Payload_Metric_MetricValueExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_Metric_MetricValueExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_Metric_MetricValueExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_Metric_MetricValueExtension::GetClassData() const { return &_class_data_; }

void Payload_Metric_MetricValueExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_Metric_MetricValueExtension *>(to)->MergeFrom(
      static_cast<const Payload_Metric_MetricValueExtension &>(from));
}


void Payload_Metric_MetricValueExtension::MergeFrom(const Payload_Metric_MetricValueExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_Metric_MetricValueExtension::CopyFrom(const Payload_Metric_MetricValueExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_Metric_MetricValueExtension::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Payload_Metric_MetricValueExtension::InternalSwap(Payload_Metric_MetricValueExtension* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_Metric_MetricValueExtension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[12]);
}

// ===================================================================

class Payload_Metric::_Internal {
 public:
  using HasBits = decltype(std::declval<Payload_Metric>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_historical(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_transient(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_null(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::com::cirruslink::sparkplug::protobuf::Payload_MetaData& metadata(const Payload_Metric* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet& properties(const Payload_Metric* msg);
  static void set_has_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet& dataset_value(const Payload_Metric* msg);
  static const ::com::cirruslink::sparkplug::protobuf::Payload_Template& template_value(const Payload_Metric* msg);
  static const ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension& extension_value(const Payload_Metric* msg);
};

const ::com::cirruslink::sparkplug::protobuf::Payload_MetaData&
Payload_Metric::_Internal::metadata(const Payload_Metric* msg) {
  return *msg->metadata_;
}
const ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet&
Payload_Metric::_Internal::properties(const Payload_Metric* msg) {
  return *msg->properties_;
}
const ::com::cirruslink::sparkplug::protobuf::Payload_DataSet&
Payload_Metric::_Internal::dataset_value(const Payload_Metric* msg) {
  return *msg->value_.dataset_value_;
}
const ::com::cirruslink::sparkplug::protobuf::Payload_Template&
Payload_Metric::_Internal::template_value(const Payload_Metric* msg) {
  return *msg->value_.template_value_;
}
const ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension&
Payload_Metric::_Internal::extension_value(const Payload_Metric* msg) {
  return *msg->value_.extension_value_;
}
void Payload_Metric::set_allocated_dataset_value(::com::cirruslink::sparkplug::protobuf::Payload_DataSet* dataset_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (dataset_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_DataSet>::GetOwningArena(dataset_value);
    if (message_arena != submessage_arena) {
      dataset_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_value, submessage_arena);
    }
    set_has_dataset_value();
    value_.dataset_value_ = dataset_value;
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.dataset_value)
}
void Payload_Metric::set_allocated_template_value(::com::cirruslink::sparkplug::protobuf::Payload_Template* template_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (template_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_Template>::GetOwningArena(template_value);
    if (message_arena != submessage_arena) {
      template_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_value, submessage_arena);
    }
    set_has_template_value();
    value_.template_value_ = template_value;
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.template_value)
}
void Payload_Metric::set_allocated_extension_value(::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* extension_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (extension_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension>::GetOwningArena(extension_value);
    if (message_arena != submessage_arena) {
      extension_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_value, submessage_arena);
    }
    set_has_extension_value();
    value_.extension_value_ = extension_value;
  }
  // @@protoc_insertion_point(field_set_allocated:com.cirruslink.sparkplug.protobuf.Payload.Metric.extension_value)
}
Payload_Metric::Payload_Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload.Metric)
}
Payload_Metric::Payload_Metric(const Payload_Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::com::cirruslink::sparkplug::protobuf::Payload_MetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  ::memcpy(&alias_, &from.alias_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_null_) -
    reinterpret_cast<char*>(&alias_)) + sizeof(is_null_));
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBooleanValue: {
      _internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case kDatasetValue: {
      _internal_mutable_dataset_value()->::com::cirruslink::sparkplug::protobuf::Payload_DataSet::MergeFrom(from._internal_dataset_value());
      break;
    }
    case kTemplateValue: {
      _internal_mutable_template_value()->::com::cirruslink::sparkplug::protobuf::Payload_Template::MergeFrom(from._internal_template_value());
      break;
    }
    case kExtensionValue: {
      _internal_mutable_extension_value()->::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension::MergeFrom(from._internal_extension_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload.Metric)
}

inline void Payload_Metric::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_null_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(is_null_));
clear_has_value();
}

Payload_Metric::~Payload_Metric() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload.Metric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete properties_;
  if (has_value()) {
    clear_value();
  }
}

void Payload_Metric::ArenaDtor(void* object) {
  Payload_Metric* _this = reinterpret_cast< Payload_Metric* >(object);
  (void)_this;
}
void Payload_Metric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_Metric::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:com.cirruslink.sparkplug.protobuf.Payload.Metric)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kBytesValue: {
      value_.bytes_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDatasetValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.dataset_value_;
      }
      break;
    }
    case kTemplateValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.template_value_;
      }
      break;
    }
    case kExtensionValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.extension_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Payload_Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(properties_ != nullptr);
      properties_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&alias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_transient_) -
        reinterpret_cast<char*>(&alias_)) + sizeof(is_transient_));
  }
  is_null_ = false;
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_Metric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.Metric.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_alias(&has_bits);
          alias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 datatype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_datatype(&has_bits);
          datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_historical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_historical(&has_bits);
          is_historical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_transient = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_transient(&has_bits);
          is_transient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_null = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_null(&has_bits);
          is_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.cirruslink.sparkplug.protobuf.Payload.MetaData metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.cirruslink.sparkplug.protobuf.Payload.PropertySet properties = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 int_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 long_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool boolean_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_boolean_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.Metric.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bytes_value = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_bytes_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.cirruslink.sparkplug.protobuf.Payload.DataSet dataset_value = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.cirruslink.sparkplug.protobuf.Payload.Template template_value = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension extension_value = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload_Metric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.Metric.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint64 alias = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_alias(), target);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // optional uint32 datatype = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_datatype(), target);
  }

  // optional bool is_historical = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_historical(), target);
  }

  // optional bool is_transient = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_transient(), target);
  }

  // optional bool is_null = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_null(), target);
  }

  // optional .com.cirruslink.sparkplug.protobuf.Payload.MetaData metadata = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::metadata(this), target, stream);
  }

  // optional .com.cirruslink.sparkplug.protobuf.Payload.PropertySet properties = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::properties(this), target, stream);
  }

  switch (value_case()) {
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_int_value(), target);
      break;
    }
    case kLongValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_long_value(), target);
      break;
    }
    case kFloatValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_float_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_double_value(), target);
      break;
    }
    case kBooleanValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_boolean_value(), target);
      break;
    }
    case kStringValue: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "com.cirruslink.sparkplug.protobuf.Payload.Metric.string_value");
      target = stream->WriteStringMaybeAliased(
          15, this->_internal_string_value(), target);
      break;
    }
    case kBytesValue: {
      target = stream->WriteBytesMaybeAliased(
          16, this->_internal_bytes_value(), target);
      break;
    }
    case kDatasetValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          17, _Internal::dataset_value(this), target, stream);
      break;
    }
    case kTemplateValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          18, _Internal::template_value(this), target, stream);
      break;
    }
    case kExtensionValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          19, _Internal::extension_value(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload.Metric)
  return target;
}

size_t Payload_Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload.Metric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .com.cirruslink.sparkplug.protobuf.Payload.MetaData metadata = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .com.cirruslink.sparkplug.protobuf.Payload.PropertySet properties = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *properties_);
    }

    // optional uint64 alias = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_alias());
    }

    // optional uint64 timestamp = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp());
    }

    // optional uint32 datatype = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_datatype());
    }

    // optional bool is_historical = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_transient = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_null = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  switch (value_case()) {
    // uint32 int_value = 10;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_int_value());
      break;
    }
    // uint64 long_value = 11;
    case kLongValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_long_value());
      break;
    }
    // float float_value = 12;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 13;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool boolean_value = 14;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // string string_value = 15;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bytes bytes_value = 16;
    case kBytesValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_value());
      break;
    }
    // .com.cirruslink.sparkplug.protobuf.Payload.DataSet dataset_value = 17;
    case kDatasetValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.dataset_value_);
      break;
    }
    // .com.cirruslink.sparkplug.protobuf.Payload.Template template_value = 18;
    case kTemplateValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.template_value_);
      break;
    }
    // .com.cirruslink.sparkplug.protobuf.Payload.Metric.MetricValueExtension extension_value = 19;
    case kExtensionValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.extension_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_Metric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_Metric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_Metric::GetClassData() const { return &_class_data_; }

void Payload_Metric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload_Metric *>(to)->MergeFrom(
      static_cast<const Payload_Metric &>(from));
}


void Payload_Metric::MergeFrom(const Payload_Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_metadata()->::com::cirruslink::sparkplug::protobuf::Payload_MetaData::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_properties()->::com::cirruslink::sparkplug::protobuf::Payload_PropertySet::MergeFrom(from._internal_properties());
    }
    if (cached_has_bits & 0x00000008u) {
      alias_ = from.alias_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      datatype_ = from.datatype_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_historical_ = from.is_historical_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_transient_ = from.is_transient_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_null(from._internal_is_null());
  }
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBooleanValue: {
      _internal_set_boolean_value(from._internal_boolean_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case kDatasetValue: {
      _internal_mutable_dataset_value()->::com::cirruslink::sparkplug::protobuf::Payload_DataSet::MergeFrom(from._internal_dataset_value());
      break;
    }
    case kTemplateValue: {
      _internal_mutable_template_value()->::com::cirruslink::sparkplug::protobuf::Payload_Template::MergeFrom(from._internal_template_value());
      break;
    }
    case kExtensionValue: {
      _internal_mutable_extension_value()->::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension::MergeFrom(from._internal_extension_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_Metric::CopyFrom(const Payload_Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_Metric::IsInitialized() const {
  if (_internal_has_metadata()) {
    if (!metadata_->IsInitialized()) return false;
  }
  if (_internal_has_properties()) {
    if (!properties_->IsInitialized()) return false;
  }
  switch (value_case()) {
    case kIntValue: {
      break;
    }
    case kLongValue: {
      break;
    }
    case kFloatValue: {
      break;
    }
    case kDoubleValue: {
      break;
    }
    case kBooleanValue: {
      break;
    }
    case kStringValue: {
      break;
    }
    case kBytesValue: {
      break;
    }
    case kDatasetValue: {
      if (has_dataset_value()) {
        if (!this->dataset_value().IsInitialized()) return false;
      }
      break;
    }
    case kTemplateValue: {
      if (has_template_value()) {
        if (!this->template_value().IsInitialized()) return false;
      }
      break;
    }
    case kExtensionValue: {
      if (has_extension_value()) {
        if (!this->extension_value().IsInitialized()) return false;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Payload_Metric::InternalSwap(Payload_Metric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payload_Metric, is_null_)
      + sizeof(Payload_Metric::is_null_)
      - PROTOBUF_FIELD_OFFSET(Payload_Metric, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_Metric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[13]);
}

// ===================================================================

class Payload::_Internal {
 public:
  using HasBits = decltype(std::declval<Payload>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Payload::Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.cirruslink.sparkplug.protobuf.Payload)
}
Payload::Payload(const Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_body()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:com.cirruslink.sparkplug.protobuf.Payload)
}

inline void Payload::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(seq_));
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:com.cirruslink.sparkplug.protobuf.Payload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Payload::ArenaDtor(void* object) {
  Payload* _this = reinterpret_cast< Payload* >(object);
  (void)_this;
}
void Payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cirruslink.sparkplug.protobuf.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  metrics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      body_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(seq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seq(&has_bits);
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.cirruslink.sparkplug.protobuf.Payload.uuid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((48u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.cirruslink.sparkplug.protobuf.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metrics(i), target, stream);
  }

  // optional uint64 seq = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seq(), target);
  }

  // optional string uuid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.cirruslink.sparkplug.protobuf.Payload.uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uuid(), target);
  }

  // optional bytes body = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_body(), target);
  }

  // Extension range [6, 536870912)
  target = _extensions_._InternalSerialize(
      6, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cirruslink.sparkplug.protobuf.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cirruslink.sparkplug.protobuf.Payload)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.cirruslink.sparkplug.protobuf.Payload.Metric metrics = 2;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string uuid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional bytes body = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

    // optional uint64 timestamp = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp());
    }

    // optional uint64 seq = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_seq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload::GetClassData() const { return &_class_data_; }

void Payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payload *>(to)->MergeFrom(
      static_cast<const Payload &>(from));
}


void Payload::MergeFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cirruslink.sparkplug.protobuf.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cirruslink.sparkplug.protobuf.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metrics_)) return false;
  return true;
}

void Payload::InternalSwap(Payload* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_.InternalSwap(&other->metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uuid_, GetArenaForAllocation(),
      &other->uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, GetArenaForAllocation(),
      &other->body_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payload, seq_)
      + sizeof(Payload::seq_)
      - PROTOBUF_FIELD_OFFSET(Payload, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sparkplug_5fb_2eproto_getter, &descriptor_table_sparkplug_5fb_2eproto_once,
      file_level_metadata_sparkplug_5fb_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace sparkplug
}  // namespace cirruslink
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter_ParameterValueExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_Template_Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_Template* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_Template >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_Template >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue_DataSetValueExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_DataSetValue >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet_Row >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_DataSet* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_DataSet >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue_PropertyValueExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySet >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_PropertySetList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_MetaData* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_MetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_MetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_Metric_MetricValueExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload_Metric* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload_Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::com::cirruslink::sparkplug::protobuf::Payload* Arena::CreateMaybeMessage< ::com::cirruslink::sparkplug::protobuf::Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::cirruslink::sparkplug::protobuf::Payload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
